
MAM_Q.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004020  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080041b0  080041b0  000051b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004214  08004214  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004214  08004214  00005214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800421c  0800421c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800421c  0800421c  0000521c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004220  08004220  00005220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004224  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000248  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002a4  200002a4  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009e4c  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001998  00000000  00000000  0000fed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d0  00000000  00000000  00011870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006c5  00000000  00000000  00012140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fbe7  00000000  00000000  00012805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a405  00000000  00000000  000323ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2bb0  00000000  00000000  0003c7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ff3a1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000028c8  00000000  00000000  000ff3e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00101cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004198 	.word	0x08004198

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004198 	.word	0x08004198

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fb24 	bl	8000bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f87e 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f93a 	bl	80007f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000580:	f000 f8d8 	bl	8000734 <MX_SPI1_Init>
  MX_UART4_Init();
 8000584:	f000 f90c 	bl	80007a0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 0); //CS PULLED LOW
 8000588:	2200      	movs	r2, #0
 800058a:	2108      	movs	r1, #8
 800058c:	4832      	ldr	r0, [pc, #200]	@ (8000658 <main+0xe8>)
 800058e:	f000 fec9 	bl	8001324 <HAL_GPIO_WritePin>
    txbuff[0]=0x20; //address of control reg 4
 8000592:	4b32      	ldr	r3, [pc, #200]	@ (800065c <main+0xec>)
 8000594:	2220      	movs	r2, #32
 8000596:	701a      	strb	r2, [r3, #0]
    txbuff[1]=0x37;  //data to be filled
 8000598:	4b30      	ldr	r3, [pc, #192]	@ (800065c <main+0xec>)
 800059a:	2237      	movs	r2, #55	@ 0x37
 800059c:	705a      	strb	r2, [r3, #1]
    HAL_SPI_Transmit(&hspi1, txbuff, 2,50);
 800059e:	2332      	movs	r3, #50	@ 0x32
 80005a0:	2202      	movs	r2, #2
 80005a2:	492e      	ldr	r1, [pc, #184]	@ (800065c <main+0xec>)
 80005a4:	482e      	ldr	r0, [pc, #184]	@ (8000660 <main+0xf0>)
 80005a6:	f001 fbb8 	bl	8001d1a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 1);//CS PULLED HIGH AGAIN ...WRITE OPERATION COMPLETED
 80005aa:	2201      	movs	r2, #1
 80005ac:	2108      	movs	r1, #8
 80005ae:	482a      	ldr	r0, [pc, #168]	@ (8000658 <main+0xe8>)
 80005b0:	f000 feb8 	bl	8001324 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,0);//CS pulled low
 80005b4:	2200      	movs	r2, #0
 80005b6:	2108      	movs	r1, #8
 80005b8:	4827      	ldr	r0, [pc, #156]	@ (8000658 <main+0xe8>)
 80005ba:	f000 feb3 	bl	8001324 <HAL_GPIO_WritePin>

	 	  txbuff[0]=0x29|0x80; // Read operation MSB-->1(OR operation)//sending higher byte,which has higher address
 80005be:	4b27      	ldr	r3, [pc, #156]	@ (800065c <main+0xec>)
 80005c0:	22a9      	movs	r2, #169	@ 0xa9
 80005c2:	701a      	strb	r2, [r3, #0]

	 	  HAL_SPI_Transmit(&hspi1, txbuff, 1,50);
 80005c4:	2332      	movs	r3, #50	@ 0x32
 80005c6:	2201      	movs	r2, #1
 80005c8:	4924      	ldr	r1, [pc, #144]	@ (800065c <main+0xec>)
 80005ca:	4825      	ldr	r0, [pc, #148]	@ (8000660 <main+0xf0>)
 80005cc:	f001 fba5 	bl	8001d1a <HAL_SPI_Transmit>

	 	  HAL_SPI_Receive(&hspi1,&Rx_x,1,50);
 80005d0:	2332      	movs	r3, #50	@ 0x32
 80005d2:	2201      	movs	r2, #1
 80005d4:	4923      	ldr	r1, [pc, #140]	@ (8000664 <main+0xf4>)
 80005d6:	4822      	ldr	r0, [pc, #136]	@ (8000660 <main+0xf0>)
 80005d8:	f001 fce3 	bl	8001fa2 <HAL_SPI_Receive>

	 	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,1);
 80005dc:	2201      	movs	r2, #1
 80005de:	2108      	movs	r1, #8
 80005e0:	481d      	ldr	r0, [pc, #116]	@ (8000658 <main+0xe8>)
 80005e2:	f000 fe9f 	bl	8001324 <HAL_GPIO_WritePin>

	 	  //Read the OUT_Y register

	 	  	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,0);//CS pulled low
 80005e6:	2200      	movs	r2, #0
 80005e8:	2108      	movs	r1, #8
 80005ea:	481b      	ldr	r0, [pc, #108]	@ (8000658 <main+0xe8>)
 80005ec:	f000 fe9a 	bl	8001324 <HAL_GPIO_WritePin>

	 	  	  txbuff[0]=0x2B|0x80; // Read operation MSB-->1(OR operation)
 80005f0:	4b1a      	ldr	r3, [pc, #104]	@ (800065c <main+0xec>)
 80005f2:	22ab      	movs	r2, #171	@ 0xab
 80005f4:	701a      	strb	r2, [r3, #0]

	 	  	  HAL_SPI_Transmit(&hspi1, txbuff, 1,50);
 80005f6:	2332      	movs	r3, #50	@ 0x32
 80005f8:	2201      	movs	r2, #1
 80005fa:	4918      	ldr	r1, [pc, #96]	@ (800065c <main+0xec>)
 80005fc:	4818      	ldr	r0, [pc, #96]	@ (8000660 <main+0xf0>)
 80005fe:	f001 fb8c 	bl	8001d1a <HAL_SPI_Transmit>

	 	  	  HAL_SPI_Receive(&hspi1,&Rx_y,1,50);
 8000602:	2332      	movs	r3, #50	@ 0x32
 8000604:	2201      	movs	r2, #1
 8000606:	4918      	ldr	r1, [pc, #96]	@ (8000668 <main+0xf8>)
 8000608:	4815      	ldr	r0, [pc, #84]	@ (8000660 <main+0xf0>)
 800060a:	f001 fcca 	bl	8001fa2 <HAL_SPI_Receive>

	 	  	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,1);
 800060e:	2201      	movs	r2, #1
 8000610:	2108      	movs	r1, #8
 8000612:	4811      	ldr	r0, [pc, #68]	@ (8000658 <main+0xe8>)
 8000614:	f000 fe86 	bl	8001324 <HAL_GPIO_WritePin>


	 	  	//Read the OUT_Z register

	 	  		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,0);//CS pulled low
 8000618:	2200      	movs	r2, #0
 800061a:	2108      	movs	r1, #8
 800061c:	480e      	ldr	r0, [pc, #56]	@ (8000658 <main+0xe8>)
 800061e:	f000 fe81 	bl	8001324 <HAL_GPIO_WritePin>

	 	  		  txbuff[0]=0x2D|0x80; // Read operation MSB-->1(OR operation)
 8000622:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <main+0xec>)
 8000624:	22ad      	movs	r2, #173	@ 0xad
 8000626:	701a      	strb	r2, [r3, #0]

	 	  		  HAL_SPI_Transmit(&hspi1, txbuff, 1,50);
 8000628:	2332      	movs	r3, #50	@ 0x32
 800062a:	2201      	movs	r2, #1
 800062c:	490b      	ldr	r1, [pc, #44]	@ (800065c <main+0xec>)
 800062e:	480c      	ldr	r0, [pc, #48]	@ (8000660 <main+0xf0>)
 8000630:	f001 fb73 	bl	8001d1a <HAL_SPI_Transmit>

	 	  		  HAL_SPI_Receive(&hspi1,&Rx_z,1,50);
 8000634:	2332      	movs	r3, #50	@ 0x32
 8000636:	2201      	movs	r2, #1
 8000638:	490c      	ldr	r1, [pc, #48]	@ (800066c <main+0xfc>)
 800063a:	4809      	ldr	r0, [pc, #36]	@ (8000660 <main+0xf0>)
 800063c:	f001 fcb1 	bl	8001fa2 <HAL_SPI_Receive>

	 	  		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,1);
 8000640:	2201      	movs	r2, #1
 8000642:	2108      	movs	r1, #8
 8000644:	4804      	ldr	r0, [pc, #16]	@ (8000658 <main+0xe8>)
 8000646:	f000 fe6d 	bl	8001324 <HAL_GPIO_WritePin>

    HAL_UART_Receive_IT(&huart4, &enter, 1);
 800064a:	2201      	movs	r2, #1
 800064c:	4908      	ldr	r1, [pc, #32]	@ (8000670 <main+0x100>)
 800064e:	4809      	ldr	r0, [pc, #36]	@ (8000674 <main+0x104>)
 8000650:	f002 f987 	bl	8002962 <HAL_UART_Receive_IT>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,0);//CS pulled low
 8000654:	bf00      	nop
 8000656:	e7ad      	b.n	80005b4 <main+0x44>
 8000658:	40021000 	.word	0x40021000
 800065c:	20000118 	.word	0x20000118
 8000660:	20000078 	.word	0x20000078
 8000664:	2000011a 	.word	0x2000011a
 8000668:	2000011b 	.word	0x2000011b
 800066c:	2000011c 	.word	0x2000011c
 8000670:	2000011d 	.word	0x2000011d
 8000674:	200000d0 	.word	0x200000d0

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	@ 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2230      	movs	r2, #48	@ 0x30
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f003 f906 	bl	8003898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	4b22      	ldr	r3, [pc, #136]	@ (800072c <SystemClock_Config+0xb4>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a4:	4a21      	ldr	r2, [pc, #132]	@ (800072c <SystemClock_Config+0xb4>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ac:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <SystemClock_Config+0xb4>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000730 <SystemClock_Config+0xb8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000730 <SystemClock_Config+0xb8>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b19      	ldr	r3, [pc, #100]	@ (8000730 <SystemClock_Config+0xb8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d4:	2302      	movs	r3, #2
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006dc:	2310      	movs	r3, #16
 80006de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0320 	add.w	r3, r7, #32
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 fe35 	bl	8001358 <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006f4:	f000 f8f2 	bl	80008dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f001 f898 	bl	8001848 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800071e:	f000 f8dd 	bl	80008dc <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	@ 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000738:	4b17      	ldr	r3, [pc, #92]	@ (8000798 <MX_SPI1_Init+0x64>)
 800073a:	4a18      	ldr	r2, [pc, #96]	@ (800079c <MX_SPI1_Init+0x68>)
 800073c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800073e:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <MX_SPI1_Init+0x64>)
 8000740:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000744:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000746:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_SPI1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_SPI1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_SPI1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_SPI1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_SPI1_Init+0x64>)
 8000760:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000764:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000766:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800076c:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_SPI1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <MX_SPI1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_SPI1_Init+0x64>)
 8000780:	220a      	movs	r2, #10
 8000782:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	@ (8000798 <MX_SPI1_Init+0x64>)
 8000786:	f001 fa3f 	bl	8001c08 <HAL_SPI_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000790:	f000 f8a4 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000078 	.word	0x20000078
 800079c:	40013000 	.word	0x40013000

080007a0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80007a4:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_UART4_Init+0x4c>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	@ (80007f0 <MX_UART4_Init+0x50>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80007aa:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <MX_UART4_Init+0x4c>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_UART4_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <MX_UART4_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <MX_UART4_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_UART4_Init+0x4c>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <MX_UART4_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <MX_UART4_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_UART4_Init+0x4c>)
 80007d8:	f001 ffe8 	bl	80027ac <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80007e2:	f000 f87b 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}char message[50];
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000d0 	.word	0x200000d0
 80007f0:	40004c00 	.word	0x40004c00

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <MX_GPIO_Init+0x7c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a17      	ldr	r2, [pc, #92]	@ (8000870 <MX_GPIO_Init+0x7c>)
 8000814:	f043 0310 	orr.w	r3, r3, #16
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <MX_GPIO_Init+0x7c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0310 	and.w	r3, r3, #16
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_GPIO_Init+0x7c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a10      	ldr	r2, [pc, #64]	@ (8000870 <MX_GPIO_Init+0x7c>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <MX_GPIO_Init+0x7c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2108      	movs	r1, #8
 8000846:	480b      	ldr	r0, [pc, #44]	@ (8000874 <MX_GPIO_Init+0x80>)
 8000848:	f000 fd6c 	bl	8001324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800084c:	2308      	movs	r3, #8
 800084e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	4619      	mov	r1, r3
 8000862:	4804      	ldr	r0, [pc, #16]	@ (8000874 <MX_GPIO_Init+0x80>)
 8000864:	f000 fbc2 	bl	8000fec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000868:	bf00      	nop
 800086a:	3720      	adds	r7, #32
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800
 8000874:	40021000 	.word	0x40021000

08000878 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af02      	add	r7, sp, #8
 800087e:	6078      	str	r0, [r7, #4]
	  if(enter=='\r')
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <HAL_UART_TxCpltCallback+0x48>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b0d      	cmp	r3, #13
 8000886:	d117      	bne.n	80008b8 <HAL_UART_TxCpltCallback+0x40>
	  {
		  sprintf(message,"x: %d  y: %d z: %d\r\n",Rx_x,Rx_y,Rx_z);
 8000888:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <HAL_UART_TxCpltCallback+0x4c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	461a      	mov	r2, r3
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <HAL_UART_TxCpltCallback+0x50>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	4619      	mov	r1, r3
 8000894:	4b0d      	ldr	r3, [pc, #52]	@ (80008cc <HAL_UART_TxCpltCallback+0x54>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	460b      	mov	r3, r1
 800089c:	490c      	ldr	r1, [pc, #48]	@ (80008d0 <HAL_UART_TxCpltCallback+0x58>)
 800089e:	480d      	ldr	r0, [pc, #52]	@ (80008d4 <HAL_UART_TxCpltCallback+0x5c>)
 80008a0:	f002 ffda 	bl	8003858 <siprintf>
		  HAL_UART_Transmit(&huart4,(uint8_t*)message,strlen(message),10);
 80008a4:	480b      	ldr	r0, [pc, #44]	@ (80008d4 <HAL_UART_TxCpltCallback+0x5c>)
 80008a6:	f7ff fc93 	bl	80001d0 <strlen>
 80008aa:	4603      	mov	r3, r0
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	230a      	movs	r3, #10
 80008b0:	4908      	ldr	r1, [pc, #32]	@ (80008d4 <HAL_UART_TxCpltCallback+0x5c>)
 80008b2:	4809      	ldr	r0, [pc, #36]	@ (80008d8 <HAL_UART_TxCpltCallback+0x60>)
 80008b4:	f001 ffca 	bl	800284c <HAL_UART_Transmit>
	  }
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2000011d 	.word	0x2000011d
 80008c4:	2000011a 	.word	0x2000011a
 80008c8:	2000011b 	.word	0x2000011b
 80008cc:	2000011c 	.word	0x2000011c
 80008d0:	080041b0 	.word	0x080041b0
 80008d4:	20000120 	.word	0x20000120
 80008d8:	200000d0 	.word	0x200000d0

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <Error_Handler+0x8>

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b10      	ldr	r3, [pc, #64]	@ (8000934 <HAL_MspInit+0x4c>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000934 <HAL_MspInit+0x4c>)
 80008f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000934 <HAL_MspInit+0x4c>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000902:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <HAL_MspInit+0x4c>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000912:	4a08      	ldr	r2, [pc, #32]	@ (8000934 <HAL_MspInit+0x4c>)
 8000914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000918:	6413      	str	r3, [r2, #64]	@ 0x40
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <HAL_MspInit+0x4c>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800

08000938 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	@ 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a19      	ldr	r2, [pc, #100]	@ (80009bc <HAL_SPI_MspInit+0x84>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d12b      	bne.n	80009b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b18      	ldr	r3, [pc, #96]	@ (80009c0 <HAL_SPI_MspInit+0x88>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000962:	4a17      	ldr	r2, [pc, #92]	@ (80009c0 <HAL_SPI_MspInit+0x88>)
 8000964:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000968:	6453      	str	r3, [r2, #68]	@ 0x44
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <HAL_SPI_MspInit+0x88>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <HAL_SPI_MspInit+0x88>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a10      	ldr	r2, [pc, #64]	@ (80009c0 <HAL_SPI_MspInit+0x88>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <HAL_SPI_MspInit+0x88>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000992:	23e0      	movs	r3, #224	@ 0xe0
 8000994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009a2:	2305      	movs	r3, #5
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <HAL_SPI_MspInit+0x8c>)
 80009ae:	f000 fb1d 	bl	8000fec <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80009b2:	bf00      	nop
 80009b4:	3728      	adds	r7, #40	@ 0x28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40013000 	.word	0x40013000
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020000 	.word	0x40020000

080009c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	@ 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a5c <HAL_UART_MspInit+0x94>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d133      	bne.n	8000a52 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000a60 <HAL_UART_MspInit+0x98>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f2:	4a1b      	ldr	r2, [pc, #108]	@ (8000a60 <HAL_UART_MspInit+0x98>)
 80009f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80009f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fa:	4b19      	ldr	r3, [pc, #100]	@ (8000a60 <HAL_UART_MspInit+0x98>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <HAL_UART_MspInit+0x98>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a14      	ldr	r2, [pc, #80]	@ (8000a60 <HAL_UART_MspInit+0x98>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b12      	ldr	r3, [pc, #72]	@ (8000a60 <HAL_UART_MspInit+0x98>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a22:	2303      	movs	r3, #3
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a32:	2308      	movs	r3, #8
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4809      	ldr	r0, [pc, #36]	@ (8000a64 <HAL_UART_MspInit+0x9c>)
 8000a3e:	f000 fad5 	bl	8000fec <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	2034      	movs	r0, #52	@ 0x34
 8000a48:	f000 fa07 	bl	8000e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000a4c:	2034      	movs	r0, #52	@ 0x34
 8000a4e:	f000 fa20 	bl	8000e92 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	@ 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40004c00 	.word	0x40004c00
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020000 	.word	0x40020000

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <NMI_Handler+0x4>

08000a70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <MemManage_Handler+0x4>

08000a80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abe:	f000 f8d1 	bl	8000c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000acc:	4802      	ldr	r0, [pc, #8]	@ (8000ad8 <UART4_IRQHandler+0x10>)
 8000ace:	f001 ff6d 	bl	80029ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200000d0 	.word	0x200000d0

08000adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae4:	4a14      	ldr	r2, [pc, #80]	@ (8000b38 <_sbrk+0x5c>)
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <_sbrk+0x60>)
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af0:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d102      	bne.n	8000afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af8:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <_sbrk+0x64>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	@ (8000b44 <_sbrk+0x68>)
 8000afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d207      	bcs.n	8000b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b0c:	f002 fecc 	bl	80038a8 <__errno>
 8000b10:	4603      	mov	r3, r0
 8000b12:	220c      	movs	r2, #12
 8000b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b1a:	e009      	b.n	8000b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b1c:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b22:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	4a05      	ldr	r2, [pc, #20]	@ (8000b40 <_sbrk+0x64>)
 8000b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20020000 	.word	0x20020000
 8000b3c:	00000400 	.word	0x00000400
 8000b40:	20000154 	.word	0x20000154
 8000b44:	200002a8 	.word	0x200002a8

08000b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <SystemInit+0x20>)
 8000b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b52:	4a05      	ldr	r2, [pc, #20]	@ (8000b68 <SystemInit+0x20>)
 8000b54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ba4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b70:	f7ff ffea 	bl	8000b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b74:	480c      	ldr	r0, [pc, #48]	@ (8000ba8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b76:	490d      	ldr	r1, [pc, #52]	@ (8000bac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b78:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f002 fe8b 	bl	80038b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9e:	f7ff fce7 	bl	8000570 <main>
  bx  lr    
 8000ba2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ba4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bb0:	08004224 	.word	0x08004224
  ldr r2, =_sbss
 8000bb4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bb8:	200002a4 	.word	0x200002a4

08000bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC_IRQHandler>
	...

08000bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c00 <HAL_Init+0x40>)
 8000bca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <HAL_Init+0x40>)
 8000bd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bdc:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a07      	ldr	r2, [pc, #28]	@ (8000c00 <HAL_Init+0x40>)
 8000be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 f92b 	bl	8000e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bee:	200f      	movs	r0, #15
 8000bf0:	f000 f808 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf4:	f7ff fe78 	bl	80008e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023c00 	.word	0x40023c00

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <HAL_InitTick+0x54>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <HAL_InitTick+0x58>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f943 	bl	8000eae <HAL_SYSTICK_Config>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00e      	b.n	8000c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d80a      	bhi.n	8000c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c40:	f000 f90b 	bl	8000e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c44:	4a06      	ldr	r2, [pc, #24]	@ (8000c60 <HAL_InitTick+0x5c>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e000      	b.n	8000c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000004 	.word	0x20000004

08000c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <HAL_IncTick+0x20>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <HAL_IncTick+0x24>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a04      	ldr	r2, [pc, #16]	@ (8000c88 <HAL_IncTick+0x24>)
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000008 	.word	0x20000008
 8000c88:	20000158 	.word	0x20000158

08000c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c90:	4b03      	ldr	r3, [pc, #12]	@ (8000ca0 <HAL_GetTick+0x14>)
 8000c92:	681b      	ldr	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000158 	.word	0x20000158

08000ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ccc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd6:	4a04      	ldr	r2, [pc, #16]	@ (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	60d3      	str	r3, [r2, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf0:	4b04      	ldr	r3, [pc, #16]	@ (8000d04 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	f003 0307 	and.w	r3, r3, #7
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db0b      	blt.n	8000d32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 021f 	and.w	r2, r3, #31
 8000d20:	4907      	ldr	r1, [pc, #28]	@ (8000d40 <__NVIC_EnableIRQ+0x38>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	2001      	movs	r0, #1
 8000d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000e100 	.word	0xe000e100

08000d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	db0a      	blt.n	8000d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	490c      	ldr	r1, [pc, #48]	@ (8000d90 <__NVIC_SetPriority+0x4c>)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	0112      	lsls	r2, r2, #4
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	440b      	add	r3, r1
 8000d68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d6c:	e00a      	b.n	8000d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4908      	ldr	r1, [pc, #32]	@ (8000d94 <__NVIC_SetPriority+0x50>)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	f003 030f 	and.w	r3, r3, #15
 8000d7a:	3b04      	subs	r3, #4
 8000d7c:	0112      	lsls	r2, r2, #4
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	440b      	add	r3, r1
 8000d82:	761a      	strb	r2, [r3, #24]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000e100 	.word	0xe000e100
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	@ 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f1c3 0307 	rsb	r3, r3, #7
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	bf28      	it	cs
 8000db6:	2304      	movcs	r3, #4
 8000db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	2b06      	cmp	r3, #6
 8000dc0:	d902      	bls.n	8000dc8 <NVIC_EncodePriority+0x30>
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3b03      	subs	r3, #3
 8000dc6:	e000      	b.n	8000dca <NVIC_EncodePriority+0x32>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	401a      	ands	r2, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	43d9      	mvns	r1, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	4313      	orrs	r3, r2
         );
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3724      	adds	r7, #36	@ 0x24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
	...

08000e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e10:	d301      	bcc.n	8000e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e12:	2301      	movs	r3, #1
 8000e14:	e00f      	b.n	8000e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e16:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <SysTick_Config+0x40>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1e:	210f      	movs	r1, #15
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e24:	f7ff ff8e 	bl	8000d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e28:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <SysTick_Config+0x40>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2e:	4b04      	ldr	r3, [pc, #16]	@ (8000e40 <SysTick_Config+0x40>)
 8000e30:	2207      	movs	r2, #7
 8000e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	e000e010 	.word	0xe000e010

08000e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff ff29 	bl	8000ca4 <__NVIC_SetPriorityGrouping>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b086      	sub	sp, #24
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e6c:	f7ff ff3e 	bl	8000cec <__NVIC_GetPriorityGrouping>
 8000e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	68b9      	ldr	r1, [r7, #8]
 8000e76:	6978      	ldr	r0, [r7, #20]
 8000e78:	f7ff ff8e 	bl	8000d98 <NVIC_EncodePriority>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff5d 	bl	8000d44 <__NVIC_SetPriority>
}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff31 	bl	8000d08 <__NVIC_EnableIRQ>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ffa2 	bl	8000e00 <SysTick_Config>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b084      	sub	sp, #16
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff feda 	bl	8000c8c <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d008      	beq.n	8000ef8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2280      	movs	r2, #128	@ 0x80
 8000eea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e052      	b.n	8000f9e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f022 0216 	bic.w	r2, r2, #22
 8000f06:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	695a      	ldr	r2, [r3, #20]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f16:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d103      	bne.n	8000f28 <HAL_DMA_Abort+0x62>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d007      	beq.n	8000f38 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 0208 	bic.w	r2, r2, #8
 8000f36:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f022 0201 	bic.w	r2, r2, #1
 8000f46:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f48:	e013      	b.n	8000f72 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f4a:	f7ff fe9f 	bl	8000c8c <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b05      	cmp	r3, #5
 8000f56:	d90c      	bls.n	8000f72 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2220      	movs	r2, #32
 8000f5c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2203      	movs	r2, #3
 8000f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e015      	b.n	8000f9e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1e4      	bne.n	8000f4a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f84:	223f      	movs	r2, #63	@ 0x3f
 8000f86:	409a      	lsls	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d004      	beq.n	8000fc4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2280      	movs	r2, #128	@ 0x80
 8000fbe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e00c      	b.n	8000fde <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2205      	movs	r2, #5
 8000fc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 0201 	bic.w	r2, r2, #1
 8000fda:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	@ 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
 8001006:	e16b      	b.n	80012e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001008:	2201      	movs	r2, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	429a      	cmp	r2, r3
 8001022:	f040 815a 	bne.w	80012da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	2b01      	cmp	r3, #1
 8001030:	d005      	beq.n	800103e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103a:	2b02      	cmp	r3, #2
 800103c:	d130      	bne.n	80010a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001074:	2201      	movs	r2, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	091b      	lsrs	r3, r3, #4
 800108a:	f003 0201 	and.w	r2, r3, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d017      	beq.n	80010dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d123      	bne.n	8001130 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	08da      	lsrs	r2, r3, #3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3208      	adds	r2, #8
 80010f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	220f      	movs	r2, #15
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	691a      	ldr	r2, [r3, #16]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	08da      	lsrs	r2, r3, #3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3208      	adds	r2, #8
 800112a:	69b9      	ldr	r1, [r7, #24]
 800112c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	2203      	movs	r2, #3
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0203 	and.w	r2, r3, #3
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 80b4 	beq.w	80012da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b60      	ldr	r3, [pc, #384]	@ (80012f8 <HAL_GPIO_Init+0x30c>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117a:	4a5f      	ldr	r2, [pc, #380]	@ (80012f8 <HAL_GPIO_Init+0x30c>)
 800117c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001180:	6453      	str	r3, [r2, #68]	@ 0x44
 8001182:	4b5d      	ldr	r3, [pc, #372]	@ (80012f8 <HAL_GPIO_Init+0x30c>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800118e:	4a5b      	ldr	r2, [pc, #364]	@ (80012fc <HAL_GPIO_Init+0x310>)
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	3302      	adds	r3, #2
 8001196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	220f      	movs	r2, #15
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a52      	ldr	r2, [pc, #328]	@ (8001300 <HAL_GPIO_Init+0x314>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d02b      	beq.n	8001212 <HAL_GPIO_Init+0x226>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a51      	ldr	r2, [pc, #324]	@ (8001304 <HAL_GPIO_Init+0x318>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d025      	beq.n	800120e <HAL_GPIO_Init+0x222>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a50      	ldr	r2, [pc, #320]	@ (8001308 <HAL_GPIO_Init+0x31c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d01f      	beq.n	800120a <HAL_GPIO_Init+0x21e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4f      	ldr	r2, [pc, #316]	@ (800130c <HAL_GPIO_Init+0x320>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d019      	beq.n	8001206 <HAL_GPIO_Init+0x21a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4e      	ldr	r2, [pc, #312]	@ (8001310 <HAL_GPIO_Init+0x324>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d013      	beq.n	8001202 <HAL_GPIO_Init+0x216>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4d      	ldr	r2, [pc, #308]	@ (8001314 <HAL_GPIO_Init+0x328>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d00d      	beq.n	80011fe <HAL_GPIO_Init+0x212>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001318 <HAL_GPIO_Init+0x32c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d007      	beq.n	80011fa <HAL_GPIO_Init+0x20e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4b      	ldr	r2, [pc, #300]	@ (800131c <HAL_GPIO_Init+0x330>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d101      	bne.n	80011f6 <HAL_GPIO_Init+0x20a>
 80011f2:	2307      	movs	r3, #7
 80011f4:	e00e      	b.n	8001214 <HAL_GPIO_Init+0x228>
 80011f6:	2308      	movs	r3, #8
 80011f8:	e00c      	b.n	8001214 <HAL_GPIO_Init+0x228>
 80011fa:	2306      	movs	r3, #6
 80011fc:	e00a      	b.n	8001214 <HAL_GPIO_Init+0x228>
 80011fe:	2305      	movs	r3, #5
 8001200:	e008      	b.n	8001214 <HAL_GPIO_Init+0x228>
 8001202:	2304      	movs	r3, #4
 8001204:	e006      	b.n	8001214 <HAL_GPIO_Init+0x228>
 8001206:	2303      	movs	r3, #3
 8001208:	e004      	b.n	8001214 <HAL_GPIO_Init+0x228>
 800120a:	2302      	movs	r3, #2
 800120c:	e002      	b.n	8001214 <HAL_GPIO_Init+0x228>
 800120e:	2301      	movs	r3, #1
 8001210:	e000      	b.n	8001214 <HAL_GPIO_Init+0x228>
 8001212:	2300      	movs	r3, #0
 8001214:	69fa      	ldr	r2, [r7, #28]
 8001216:	f002 0203 	and.w	r2, r2, #3
 800121a:	0092      	lsls	r2, r2, #2
 800121c:	4093      	lsls	r3, r2
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001224:	4935      	ldr	r1, [pc, #212]	@ (80012fc <HAL_GPIO_Init+0x310>)
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	089b      	lsrs	r3, r3, #2
 800122a:	3302      	adds	r3, #2
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001232:	4b3b      	ldr	r3, [pc, #236]	@ (8001320 <HAL_GPIO_Init+0x334>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001256:	4a32      	ldr	r2, [pc, #200]	@ (8001320 <HAL_GPIO_Init+0x334>)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800125c:	4b30      	ldr	r3, [pc, #192]	@ (8001320 <HAL_GPIO_Init+0x334>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001280:	4a27      	ldr	r2, [pc, #156]	@ (8001320 <HAL_GPIO_Init+0x334>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001286:	4b26      	ldr	r3, [pc, #152]	@ (8001320 <HAL_GPIO_Init+0x334>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001320 <HAL_GPIO_Init+0x334>)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001320 <HAL_GPIO_Init+0x334>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012d4:	4a12      	ldr	r2, [pc, #72]	@ (8001320 <HAL_GPIO_Init+0x334>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3301      	adds	r3, #1
 80012de:	61fb      	str	r3, [r7, #28]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	2b0f      	cmp	r3, #15
 80012e4:	f67f ae90 	bls.w	8001008 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	3724      	adds	r7, #36	@ 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40013800 	.word	0x40013800
 8001300:	40020000 	.word	0x40020000
 8001304:	40020400 	.word	0x40020400
 8001308:	40020800 	.word	0x40020800
 800130c:	40020c00 	.word	0x40020c00
 8001310:	40021000 	.word	0x40021000
 8001314:	40021400 	.word	0x40021400
 8001318:	40021800 	.word	0x40021800
 800131c:	40021c00 	.word	0x40021c00
 8001320:	40013c00 	.word	0x40013c00

08001324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	807b      	strh	r3, [r7, #2]
 8001330:	4613      	mov	r3, r2
 8001332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001334:	787b      	ldrb	r3, [r7, #1]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001340:	e003      	b.n	800134a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	041a      	lsls	r2, r3, #16
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	619a      	str	r2, [r3, #24]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e267      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d075      	beq.n	8001462 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001376:	4b88      	ldr	r3, [pc, #544]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	2b04      	cmp	r3, #4
 8001380:	d00c      	beq.n	800139c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001382:	4b85      	ldr	r3, [pc, #532]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800138a:	2b08      	cmp	r3, #8
 800138c:	d112      	bne.n	80013b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800138e:	4b82      	ldr	r3, [pc, #520]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001396:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800139a:	d10b      	bne.n	80013b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139c:	4b7e      	ldr	r3, [pc, #504]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d05b      	beq.n	8001460 <HAL_RCC_OscConfig+0x108>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d157      	bne.n	8001460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e242      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013bc:	d106      	bne.n	80013cc <HAL_RCC_OscConfig+0x74>
 80013be:	4b76      	ldr	r3, [pc, #472]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a75      	ldr	r2, [pc, #468]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80013c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e01d      	b.n	8001408 <HAL_RCC_OscConfig+0xb0>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x98>
 80013d6:	4b70      	ldr	r3, [pc, #448]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a6f      	ldr	r2, [pc, #444]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80013dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b6d      	ldr	r3, [pc, #436]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a6c      	ldr	r2, [pc, #432]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80013e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e00b      	b.n	8001408 <HAL_RCC_OscConfig+0xb0>
 80013f0:	4b69      	ldr	r3, [pc, #420]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a68      	ldr	r2, [pc, #416]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80013f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b66      	ldr	r3, [pc, #408]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a65      	ldr	r2, [pc, #404]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 8001402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d013      	beq.n	8001438 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff fc3c 	bl	8000c8c <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff fc38 	bl	8000c8c <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	@ 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e207      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142a:	4b5b      	ldr	r3, [pc, #364]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0xc0>
 8001436:	e014      	b.n	8001462 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fc28 	bl	8000c8c <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fc24 	bl	8000c8c <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	@ 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e1f3      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001452:	4b51      	ldr	r3, [pc, #324]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0xe8>
 800145e:	e000      	b.n	8001462 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d063      	beq.n	8001536 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800146e:	4b4a      	ldr	r3, [pc, #296]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 030c 	and.w	r3, r3, #12
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00b      	beq.n	8001492 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800147a:	4b47      	ldr	r3, [pc, #284]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001482:	2b08      	cmp	r3, #8
 8001484:	d11c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001486:	4b44      	ldr	r3, [pc, #272]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d116      	bne.n	80014c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001492:	4b41      	ldr	r3, [pc, #260]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <HAL_RCC_OscConfig+0x152>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d001      	beq.n	80014aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e1c7      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4937      	ldr	r1, [pc, #220]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014be:	e03a      	b.n	8001536 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d020      	beq.n	800150a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c8:	4b34      	ldr	r3, [pc, #208]	@ (800159c <HAL_RCC_OscConfig+0x244>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ce:	f7ff fbdd 	bl	8000c8c <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d6:	f7ff fbd9 	bl	8000c8c <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e1a8      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f4:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4925      	ldr	r1, [pc, #148]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 8001504:	4313      	orrs	r3, r2
 8001506:	600b      	str	r3, [r1, #0]
 8001508:	e015      	b.n	8001536 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150a:	4b24      	ldr	r3, [pc, #144]	@ (800159c <HAL_RCC_OscConfig+0x244>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001510:	f7ff fbbc 	bl	8000c8c <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001518:	f7ff fbb8 	bl	8000c8c <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e187      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152a:	4b1b      	ldr	r3, [pc, #108]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d036      	beq.n	80015b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d016      	beq.n	8001578 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154a:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <HAL_RCC_OscConfig+0x248>)
 800154c:	2201      	movs	r2, #1
 800154e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001550:	f7ff fb9c 	bl	8000c8c <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001558:	f7ff fb98 	bl	8000c8c <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e167      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156a:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 800156c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0x200>
 8001576:	e01b      	b.n	80015b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001578:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <HAL_RCC_OscConfig+0x248>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157e:	f7ff fb85 	bl	8000c8c <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001584:	e00e      	b.n	80015a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001586:	f7ff fb81 	bl	8000c8c <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d907      	bls.n	80015a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e150      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
 8001598:	40023800 	.word	0x40023800
 800159c:	42470000 	.word	0x42470000
 80015a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a4:	4b88      	ldr	r3, [pc, #544]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1ea      	bne.n	8001586 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 8097 	beq.w	80016ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c2:	4b81      	ldr	r3, [pc, #516]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10f      	bne.n	80015ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	4b7d      	ldr	r3, [pc, #500]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d6:	4a7c      	ldr	r2, [pc, #496]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015de:	4b7a      	ldr	r3, [pc, #488]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ea:	2301      	movs	r3, #1
 80015ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ee:	4b77      	ldr	r3, [pc, #476]	@ (80017cc <HAL_RCC_OscConfig+0x474>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d118      	bne.n	800162c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015fa:	4b74      	ldr	r3, [pc, #464]	@ (80017cc <HAL_RCC_OscConfig+0x474>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a73      	ldr	r2, [pc, #460]	@ (80017cc <HAL_RCC_OscConfig+0x474>)
 8001600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001606:	f7ff fb41 	bl	8000c8c <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800160e:	f7ff fb3d 	bl	8000c8c <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e10c      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001620:	4b6a      	ldr	r3, [pc, #424]	@ (80017cc <HAL_RCC_OscConfig+0x474>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d106      	bne.n	8001642 <HAL_RCC_OscConfig+0x2ea>
 8001634:	4b64      	ldr	r3, [pc, #400]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001638:	4a63      	ldr	r2, [pc, #396]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001640:	e01c      	b.n	800167c <HAL_RCC_OscConfig+0x324>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b05      	cmp	r3, #5
 8001648:	d10c      	bne.n	8001664 <HAL_RCC_OscConfig+0x30c>
 800164a:	4b5f      	ldr	r3, [pc, #380]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 800164c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800164e:	4a5e      	ldr	r2, [pc, #376]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6713      	str	r3, [r2, #112]	@ 0x70
 8001656:	4b5c      	ldr	r3, [pc, #368]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800165a:	4a5b      	ldr	r2, [pc, #364]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6713      	str	r3, [r2, #112]	@ 0x70
 8001662:	e00b      	b.n	800167c <HAL_RCC_OscConfig+0x324>
 8001664:	4b58      	ldr	r3, [pc, #352]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001668:	4a57      	ldr	r2, [pc, #348]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001670:	4b55      	ldr	r3, [pc, #340]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001674:	4a54      	ldr	r2, [pc, #336]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001676:	f023 0304 	bic.w	r3, r3, #4
 800167a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d015      	beq.n	80016b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001684:	f7ff fb02 	bl	8000c8c <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168a:	e00a      	b.n	80016a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168c:	f7ff fafe 	bl	8000c8c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e0cb      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a2:	4b49      	ldr	r3, [pc, #292]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0ee      	beq.n	800168c <HAL_RCC_OscConfig+0x334>
 80016ae:	e014      	b.n	80016da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b0:	f7ff faec 	bl	8000c8c <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b8:	f7ff fae8 	bl	8000c8c <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e0b5      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ce:	4b3e      	ldr	r3, [pc, #248]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1ee      	bne.n	80016b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016da:	7dfb      	ldrb	r3, [r7, #23]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d105      	bne.n	80016ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e0:	4b39      	ldr	r3, [pc, #228]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e4:	4a38      	ldr	r2, [pc, #224]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 80a1 	beq.w	8001838 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016f6:	4b34      	ldr	r3, [pc, #208]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d05c      	beq.n	80017bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d141      	bne.n	800178e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170a:	4b31      	ldr	r3, [pc, #196]	@ (80017d0 <HAL_RCC_OscConfig+0x478>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff fabc 	bl	8000c8c <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff fab8 	bl	8000c8c <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e087      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172a:	4b27      	ldr	r3, [pc, #156]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69da      	ldr	r2, [r3, #28]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001744:	019b      	lsls	r3, r3, #6
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174c:	085b      	lsrs	r3, r3, #1
 800174e:	3b01      	subs	r3, #1
 8001750:	041b      	lsls	r3, r3, #16
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001758:	061b      	lsls	r3, r3, #24
 800175a:	491b      	ldr	r1, [pc, #108]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001760:	4b1b      	ldr	r3, [pc, #108]	@ (80017d0 <HAL_RCC_OscConfig+0x478>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001766:	f7ff fa91 	bl	8000c8c <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176e:	f7ff fa8d 	bl	8000c8c <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e05c      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001780:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x416>
 800178c:	e054      	b.n	8001838 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178e:	4b10      	ldr	r3, [pc, #64]	@ (80017d0 <HAL_RCC_OscConfig+0x478>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fa7a 	bl	8000c8c <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179c:	f7ff fa76 	bl	8000c8c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e045      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x444>
 80017ba:	e03d      	b.n	8001838 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d107      	bne.n	80017d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e038      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40007000 	.word	0x40007000
 80017d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001844 <HAL_RCC_OscConfig+0x4ec>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d028      	beq.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d121      	bne.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d11a      	bne.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001804:	4013      	ands	r3, r2
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800180a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800180c:	4293      	cmp	r3, r2
 800180e:	d111      	bne.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181a:	085b      	lsrs	r3, r3, #1
 800181c:	3b01      	subs	r3, #1
 800181e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001820:	429a      	cmp	r2, r3
 8001822:	d107      	bne.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d001      	beq.n	8001838 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e000      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0cc      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800185c:	4b68      	ldr	r3, [pc, #416]	@ (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d90c      	bls.n	8001884 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186a:	4b65      	ldr	r3, [pc, #404]	@ (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001872:	4b63      	ldr	r3, [pc, #396]	@ (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0b8      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d020      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800189c:	4b59      	ldr	r3, [pc, #356]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4a58      	ldr	r2, [pc, #352]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b4:	4b53      	ldr	r3, [pc, #332]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	4a52      	ldr	r2, [pc, #328]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c0:	4b50      	ldr	r3, [pc, #320]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	494d      	ldr	r1, [pc, #308]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d044      	beq.n	8001968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	4b47      	ldr	r3, [pc, #284]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d119      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e07f      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d003      	beq.n	8001906 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001902:	2b03      	cmp	r3, #3
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001906:	4b3f      	ldr	r3, [pc, #252]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d109      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e06f      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001916:	4b3b      	ldr	r3, [pc, #236]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e067      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001926:	4b37      	ldr	r3, [pc, #220]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f023 0203 	bic.w	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4934      	ldr	r1, [pc, #208]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	4313      	orrs	r3, r2
 8001936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001938:	f7ff f9a8 	bl	8000c8c <HAL_GetTick>
 800193c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193e:	e00a      	b.n	8001956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001940:	f7ff f9a4 	bl	8000c8c <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e04f      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001956:	4b2b      	ldr	r3, [pc, #172]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 020c 	and.w	r2, r3, #12
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	429a      	cmp	r2, r3
 8001966:	d1eb      	bne.n	8001940 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001968:	4b25      	ldr	r3, [pc, #148]	@ (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d20c      	bcs.n	8001990 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b22      	ldr	r3, [pc, #136]	@ (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197e:	4b20      	ldr	r3, [pc, #128]	@ (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e032      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800199c:	4b19      	ldr	r3, [pc, #100]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	4916      	ldr	r1, [pc, #88]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d009      	beq.n	80019ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ba:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	490e      	ldr	r1, [pc, #56]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019ce:	f000 f821 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
 80019d2:	4602      	mov	r2, r0
 80019d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	091b      	lsrs	r3, r3, #4
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	490a      	ldr	r1, [pc, #40]	@ (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 80019e0:	5ccb      	ldrb	r3, [r1, r3]
 80019e2:	fa22 f303 	lsr.w	r3, r2, r3
 80019e6:	4a09      	ldr	r2, [pc, #36]	@ (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80019ea:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <HAL_RCC_ClockConfig+0x1c8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f908 	bl	8000c04 <HAL_InitTick>

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023c00 	.word	0x40023c00
 8001a04:	40023800 	.word	0x40023800
 8001a08:	080041c8 	.word	0x080041c8
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20000004 	.word	0x20000004

08001a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a18:	b090      	sub	sp, #64	@ 0x40
 8001a1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a2c:	4b59      	ldr	r3, [pc, #356]	@ (8001b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d00d      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0x40>
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	f200 80a1 	bhi.w	8001b80 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <HAL_RCC_GetSysClockFreq+0x34>
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d003      	beq.n	8001a4e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a46:	e09b      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a48:	4b53      	ldr	r3, [pc, #332]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a4c:	e09b      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a4e:	4b53      	ldr	r3, [pc, #332]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a52:	e098      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a54:	4b4f      	ldr	r3, [pc, #316]	@ (8001b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a5c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a5e:	4b4d      	ldr	r3, [pc, #308]	@ (8001b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d028      	beq.n	8001abc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	099b      	lsrs	r3, r3, #6
 8001a70:	2200      	movs	r2, #0
 8001a72:	623b      	str	r3, [r7, #32]
 8001a74:	627a      	str	r2, [r7, #36]	@ 0x24
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4b47      	ldr	r3, [pc, #284]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a80:	fb03 f201 	mul.w	r2, r3, r1
 8001a84:	2300      	movs	r3, #0
 8001a86:	fb00 f303 	mul.w	r3, r0, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a43      	ldr	r2, [pc, #268]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a8e:	fba0 1202 	umull	r1, r2, r0, r2
 8001a92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a94:	460a      	mov	r2, r1
 8001a96:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001a98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a9a:	4413      	add	r3, r2
 8001a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	61bb      	str	r3, [r7, #24]
 8001aa4:	61fa      	str	r2, [r7, #28]
 8001aa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aaa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001aae:	f7fe fbe7 	bl	8000280 <__aeabi_uldivmod>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001aba:	e053      	b.n	8001b64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001abc:	4b35      	ldr	r3, [pc, #212]	@ (8001b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	099b      	lsrs	r3, r3, #6
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	617a      	str	r2, [r7, #20]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ace:	f04f 0b00 	mov.w	fp, #0
 8001ad2:	4652      	mov	r2, sl
 8001ad4:	465b      	mov	r3, fp
 8001ad6:	f04f 0000 	mov.w	r0, #0
 8001ada:	f04f 0100 	mov.w	r1, #0
 8001ade:	0159      	lsls	r1, r3, #5
 8001ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ae4:	0150      	lsls	r0, r2, #5
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	ebb2 080a 	subs.w	r8, r2, sl
 8001aee:	eb63 090b 	sbc.w	r9, r3, fp
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	f04f 0300 	mov.w	r3, #0
 8001afa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001afe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b06:	ebb2 0408 	subs.w	r4, r2, r8
 8001b0a:	eb63 0509 	sbc.w	r5, r3, r9
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	00eb      	lsls	r3, r5, #3
 8001b18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b1c:	00e2      	lsls	r2, r4, #3
 8001b1e:	4614      	mov	r4, r2
 8001b20:	461d      	mov	r5, r3
 8001b22:	eb14 030a 	adds.w	r3, r4, sl
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	eb45 030b 	adc.w	r3, r5, fp
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	028b      	lsls	r3, r1, #10
 8001b3e:	4621      	mov	r1, r4
 8001b40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b44:	4621      	mov	r1, r4
 8001b46:	028a      	lsls	r2, r1, #10
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	60fa      	str	r2, [r7, #12]
 8001b54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b58:	f7fe fb92 	bl	8000280 <__aeabi_uldivmod>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4613      	mov	r3, r2
 8001b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b64:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	0c1b      	lsrs	r3, r3, #16
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	3301      	adds	r3, #1
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001b74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b7e:	e002      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b80:	4b05      	ldr	r3, [pc, #20]	@ (8001b98 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b82:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3740      	adds	r7, #64	@ 0x40
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	00f42400 	.word	0x00f42400
 8001b9c:	017d7840 	.word	0x017d7840

08001ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ba4:	4b03      	ldr	r3, [pc, #12]	@ (8001bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000000 	.word	0x20000000

08001bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bbc:	f7ff fff0 	bl	8001ba0 <HAL_RCC_GetHCLKFreq>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	0a9b      	lsrs	r3, r3, #10
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	4903      	ldr	r1, [pc, #12]	@ (8001bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bce:	5ccb      	ldrb	r3, [r1, r3]
 8001bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	080041d8 	.word	0x080041d8

08001be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001be4:	f7ff ffdc 	bl	8001ba0 <HAL_RCC_GetHCLKFreq>
 8001be8:	4602      	mov	r2, r0
 8001bea:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	0b5b      	lsrs	r3, r3, #13
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	4903      	ldr	r1, [pc, #12]	@ (8001c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bf6:	5ccb      	ldrb	r3, [r1, r3]
 8001bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40023800 	.word	0x40023800
 8001c04:	080041d8 	.word	0x080041d8

08001c08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e07b      	b.n	8001d12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d108      	bne.n	8001c34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001c2a:	d009      	beq.n	8001c40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]
 8001c32:	e005      	b.n	8001c40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d106      	bne.n	8001c60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7fe fe6c 	bl	8000938 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2202      	movs	r2, #2
 8001c64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cc4:	ea42 0103 	orr.w	r1, r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ccc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	0c1b      	lsrs	r3, r3, #16
 8001cde:	f003 0104 	and.w	r1, r3, #4
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce6:	f003 0210 	and.w	r2, r3, #16
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	69da      	ldr	r2, [r3, #28]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b088      	sub	sp, #32
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	60f8      	str	r0, [r7, #12]
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	603b      	str	r3, [r7, #0]
 8001d26:	4613      	mov	r3, r2
 8001d28:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d2a:	f7fe ffaf 	bl	8000c8c <HAL_GetTick>
 8001d2e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d001      	beq.n	8001d44 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001d40:	2302      	movs	r3, #2
 8001d42:	e12a      	b.n	8001f9a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <HAL_SPI_Transmit+0x36>
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e122      	b.n	8001f9a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d101      	bne.n	8001d62 <HAL_SPI_Transmit+0x48>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e11b      	b.n	8001f9a <HAL_SPI_Transmit+0x280>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	88fa      	ldrh	r2, [r7, #6]
 8001d82:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	88fa      	ldrh	r2, [r7, #6]
 8001d88:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001db0:	d10f      	bne.n	8001dd2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001dc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001dd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ddc:	2b40      	cmp	r3, #64	@ 0x40
 8001dde:	d007      	beq.n	8001df0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001dee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001df8:	d152      	bne.n	8001ea0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <HAL_SPI_Transmit+0xee>
 8001e02:	8b7b      	ldrh	r3, [r7, #26]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d145      	bne.n	8001e94 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0c:	881a      	ldrh	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e18:	1c9a      	adds	r2, r3, #2
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e2c:	e032      	b.n	8001e94 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d112      	bne.n	8001e62 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e40:	881a      	ldrh	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4c:	1c9a      	adds	r2, r3, #2
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001e60:	e018      	b.n	8001e94 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e62:	f7fe ff13 	bl	8000c8c <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d803      	bhi.n	8001e7a <HAL_SPI_Transmit+0x160>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e78:	d102      	bne.n	8001e80 <HAL_SPI_Transmit+0x166>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d109      	bne.n	8001e94 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e082      	b.n	8001f9a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1c7      	bne.n	8001e2e <HAL_SPI_Transmit+0x114>
 8001e9e:	e053      	b.n	8001f48 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d002      	beq.n	8001eae <HAL_SPI_Transmit+0x194>
 8001ea8:	8b7b      	ldrh	r3, [r7, #26]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d147      	bne.n	8001f3e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	330c      	adds	r3, #12
 8001eb8:	7812      	ldrb	r2, [r2, #0]
 8001eba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001ed4:	e033      	b.n	8001f3e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d113      	bne.n	8001f0c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	330c      	adds	r3, #12
 8001eee:	7812      	ldrb	r2, [r2, #0]
 8001ef0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	3b01      	subs	r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001f0a:	e018      	b.n	8001f3e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f0c:	f7fe febe 	bl	8000c8c <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d803      	bhi.n	8001f24 <HAL_SPI_Transmit+0x20a>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f22:	d102      	bne.n	8001f2a <HAL_SPI_Transmit+0x210>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d109      	bne.n	8001f3e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e02d      	b.n	8001f9a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1c6      	bne.n	8001ed6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f48:	69fa      	ldr	r2, [r7, #28]
 8001f4a:	6839      	ldr	r1, [r7, #0]
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 fbd9 	bl	8002704 <SPI_EndRxTxTransaction>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10a      	bne.n	8001f7c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001f98:	2300      	movs	r3, #0
  }
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3720      	adds	r7, #32
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b088      	sub	sp, #32
 8001fa6:	af02      	add	r7, sp, #8
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	603b      	str	r3, [r7, #0]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d001      	beq.n	8001fc2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e104      	b.n	80021cc <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001fca:	d112      	bne.n	8001ff2 <HAL_SPI_Receive+0x50>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10e      	bne.n	8001ff2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2204      	movs	r2, #4
 8001fd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001fdc:	88fa      	ldrh	r2, [r7, #6]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	68b9      	ldr	r1, [r7, #8]
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 f8f3 	bl	80021d4 <HAL_SPI_TransmitReceive>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	e0ec      	b.n	80021cc <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ff2:	f7fe fe4b 	bl	8000c8c <HAL_GetTick>
 8001ff6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <HAL_SPI_Receive+0x62>
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0e1      	b.n	80021cc <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_SPI_Receive+0x74>
 8002012:	2302      	movs	r3, #2
 8002014:	e0da      	b.n	80021cc <HAL_SPI_Receive+0x22a>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2204      	movs	r2, #4
 8002022:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	88fa      	ldrh	r2, [r7, #6]
 8002036:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	88fa      	ldrh	r2, [r7, #6]
 800203c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002064:	d10f      	bne.n	8002086 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002074:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002084:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002090:	2b40      	cmp	r3, #64	@ 0x40
 8002092:	d007      	beq.n	80020a4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020a2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d170      	bne.n	800218e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80020ac:	e035      	b.n	800211a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d115      	bne.n	80020e8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f103 020c 	add.w	r2, r3, #12
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020c8:	7812      	ldrb	r2, [r2, #0]
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020dc:	b29b      	uxth	r3, r3
 80020de:	3b01      	subs	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80020e6:	e018      	b.n	800211a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020e8:	f7fe fdd0 	bl	8000c8c <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d803      	bhi.n	8002100 <HAL_SPI_Receive+0x15e>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020fe:	d102      	bne.n	8002106 <HAL_SPI_Receive+0x164>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e058      	b.n	80021cc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800211e:	b29b      	uxth	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1c4      	bne.n	80020ae <HAL_SPI_Receive+0x10c>
 8002124:	e038      	b.n	8002198 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b01      	cmp	r3, #1
 8002132:	d113      	bne.n	800215c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800213e:	b292      	uxth	r2, r2
 8002140:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002146:	1c9a      	adds	r2, r3, #2
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002150:	b29b      	uxth	r3, r3
 8002152:	3b01      	subs	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800215a:	e018      	b.n	800218e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800215c:	f7fe fd96 	bl	8000c8c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d803      	bhi.n	8002174 <HAL_SPI_Receive+0x1d2>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002172:	d102      	bne.n	800217a <HAL_SPI_Receive+0x1d8>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d109      	bne.n	800218e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e01e      	b.n	80021cc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002192:	b29b      	uxth	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1c6      	bne.n	8002126 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	6839      	ldr	r1, [r7, #0]
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 fa4b 	bl	8002638 <SPI_EndRxTransaction>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2220      	movs	r2, #32
 80021ac:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80021ca:	2300      	movs	r3, #0
  }
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08a      	sub	sp, #40	@ 0x28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80021e2:	2301      	movs	r3, #1
 80021e4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021e6:	f7fe fd51 	bl	8000c8c <HAL_GetTick>
 80021ea:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021f2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80021fa:	887b      	ldrh	r3, [r7, #2]
 80021fc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021fe:	7ffb      	ldrb	r3, [r7, #31]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d00c      	beq.n	800221e <HAL_SPI_TransmitReceive+0x4a>
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800220a:	d106      	bne.n	800221a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <HAL_SPI_TransmitReceive+0x46>
 8002214:	7ffb      	ldrb	r3, [r7, #31]
 8002216:	2b04      	cmp	r3, #4
 8002218:	d001      	beq.n	800221e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800221a:	2302      	movs	r3, #2
 800221c:	e17f      	b.n	800251e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_SPI_TransmitReceive+0x5c>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <HAL_SPI_TransmitReceive+0x5c>
 800222a:	887b      	ldrh	r3, [r7, #2]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e174      	b.n	800251e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_SPI_TransmitReceive+0x6e>
 800223e:	2302      	movs	r3, #2
 8002240:	e16d      	b.n	800251e <HAL_SPI_TransmitReceive+0x34a>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b04      	cmp	r3, #4
 8002254:	d003      	beq.n	800225e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2205      	movs	r2, #5
 800225a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	887a      	ldrh	r2, [r7, #2]
 800226e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	887a      	ldrh	r2, [r7, #2]
 8002286:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800229e:	2b40      	cmp	r3, #64	@ 0x40
 80022a0:	d007      	beq.n	80022b2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022ba:	d17e      	bne.n	80023ba <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <HAL_SPI_TransmitReceive+0xf6>
 80022c4:	8afb      	ldrh	r3, [r7, #22]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d16c      	bne.n	80023a4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	881a      	ldrh	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022da:	1c9a      	adds	r2, r3, #2
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022ee:	e059      	b.n	80023a4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d11b      	bne.n	8002336 <HAL_SPI_TransmitReceive+0x162>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002302:	b29b      	uxth	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d016      	beq.n	8002336 <HAL_SPI_TransmitReceive+0x162>
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	2b01      	cmp	r3, #1
 800230c:	d113      	bne.n	8002336 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	881a      	ldrh	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	1c9a      	adds	r2, r3, #2
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002328:	b29b      	uxth	r3, r3
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002332:	2300      	movs	r3, #0
 8002334:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b01      	cmp	r3, #1
 8002342:	d119      	bne.n	8002378 <HAL_SPI_TransmitReceive+0x1a4>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002348:	b29b      	uxth	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d014      	beq.n	8002378 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002358:	b292      	uxth	r2, r2
 800235a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002360:	1c9a      	adds	r2, r3, #2
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800236a:	b29b      	uxth	r3, r3
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002374:	2301      	movs	r3, #1
 8002376:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002378:	f7fe fc88 	bl	8000c8c <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002384:	429a      	cmp	r2, r3
 8002386:	d80d      	bhi.n	80023a4 <HAL_SPI_TransmitReceive+0x1d0>
 8002388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800238e:	d009      	beq.n	80023a4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e0bc      	b.n	800251e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1a0      	bne.n	80022f0 <HAL_SPI_TransmitReceive+0x11c>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d19b      	bne.n	80022f0 <HAL_SPI_TransmitReceive+0x11c>
 80023b8:	e082      	b.n	80024c0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <HAL_SPI_TransmitReceive+0x1f4>
 80023c2:	8afb      	ldrh	r3, [r7, #22]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d171      	bne.n	80024ac <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	330c      	adds	r3, #12
 80023d2:	7812      	ldrb	r2, [r2, #0]
 80023d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023ee:	e05d      	b.n	80024ac <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d11c      	bne.n	8002438 <HAL_SPI_TransmitReceive+0x264>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002402:	b29b      	uxth	r3, r3
 8002404:	2b00      	cmp	r3, #0
 8002406:	d017      	beq.n	8002438 <HAL_SPI_TransmitReceive+0x264>
 8002408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240a:	2b01      	cmp	r3, #1
 800240c:	d114      	bne.n	8002438 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	330c      	adds	r3, #12
 8002418:	7812      	ldrb	r2, [r2, #0]
 800241a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b01      	cmp	r3, #1
 8002444:	d119      	bne.n	800247a <HAL_SPI_TransmitReceive+0x2a6>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800244a:	b29b      	uxth	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d014      	beq.n	800247a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800246c:	b29b      	uxth	r3, r3
 800246e:	3b01      	subs	r3, #1
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002476:	2301      	movs	r3, #1
 8002478:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800247a:	f7fe fc07 	bl	8000c8c <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002486:	429a      	cmp	r2, r3
 8002488:	d803      	bhi.n	8002492 <HAL_SPI_TransmitReceive+0x2be>
 800248a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002490:	d102      	bne.n	8002498 <HAL_SPI_TransmitReceive+0x2c4>
 8002492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002494:	2b00      	cmp	r3, #0
 8002496:	d109      	bne.n	80024ac <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e038      	b.n	800251e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d19c      	bne.n	80023f0 <HAL_SPI_TransmitReceive+0x21c>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d197      	bne.n	80023f0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024c0:	6a3a      	ldr	r2, [r7, #32]
 80024c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 f91d 	bl	8002704 <SPI_EndRxTxTransaction>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2220      	movs	r2, #32
 80024d4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e01d      	b.n	800251e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10a      	bne.n	8002500 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800251c:	2300      	movs	r3, #0
  }
}
 800251e:	4618      	mov	r0, r3
 8002520:	3728      	adds	r7, #40	@ 0x28
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	4613      	mov	r3, r2
 8002536:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002538:	f7fe fba8 	bl	8000c8c <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	4413      	add	r3, r2
 8002546:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002548:	f7fe fba0 	bl	8000c8c <HAL_GetTick>
 800254c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800254e:	4b39      	ldr	r3, [pc, #228]	@ (8002634 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	015b      	lsls	r3, r3, #5
 8002554:	0d1b      	lsrs	r3, r3, #20
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	fb02 f303 	mul.w	r3, r2, r3
 800255c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800255e:	e054      	b.n	800260a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002566:	d050      	beq.n	800260a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002568:	f7fe fb90 	bl	8000c8c <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	429a      	cmp	r2, r3
 8002576:	d902      	bls.n	800257e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d13d      	bne.n	80025fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800258c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002596:	d111      	bne.n	80025bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025a0:	d004      	beq.n	80025ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025aa:	d107      	bne.n	80025bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025c4:	d10f      	bne.n	80025e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e017      	b.n	800262a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	3b01      	subs	r3, #1
 8002608:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	4013      	ands	r3, r2
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	429a      	cmp	r2, r3
 8002618:	bf0c      	ite	eq
 800261a:	2301      	moveq	r3, #1
 800261c:	2300      	movne	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	461a      	mov	r2, r3
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	429a      	cmp	r2, r3
 8002626:	d19b      	bne.n	8002560 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3720      	adds	r7, #32
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000000 	.word	0x20000000

08002638 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af02      	add	r7, sp, #8
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800264c:	d111      	bne.n	8002672 <SPI_EndRxTransaction+0x3a>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002656:	d004      	beq.n	8002662 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002660:	d107      	bne.n	8002672 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002670:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800267a:	d12a      	bne.n	80026d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002684:	d012      	beq.n	80026ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2200      	movs	r2, #0
 800268e:	2180      	movs	r1, #128	@ 0x80
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f7ff ff49 	bl	8002528 <SPI_WaitFlagStateUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d02d      	beq.n	80026f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a0:	f043 0220 	orr.w	r2, r3, #32
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e026      	b.n	80026fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2200      	movs	r2, #0
 80026b4:	2101      	movs	r1, #1
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f7ff ff36 	bl	8002528 <SPI_WaitFlagStateUntilTimeout>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d01a      	beq.n	80026f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c6:	f043 0220 	orr.w	r2, r3, #32
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e013      	b.n	80026fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2200      	movs	r2, #0
 80026da:	2101      	movs	r1, #1
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f7ff ff23 	bl	8002528 <SPI_WaitFlagStateUntilTimeout>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d007      	beq.n	80026f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ec:	f043 0220 	orr.w	r2, r3, #32
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e000      	b.n	80026fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af02      	add	r7, sp, #8
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2201      	movs	r2, #1
 8002718:	2102      	movs	r1, #2
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f7ff ff04 	bl	8002528 <SPI_WaitFlagStateUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d007      	beq.n	8002736 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272a:	f043 0220 	orr.w	r2, r3, #32
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e032      	b.n	800279c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002736:	4b1b      	ldr	r3, [pc, #108]	@ (80027a4 <SPI_EndRxTxTransaction+0xa0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a1b      	ldr	r2, [pc, #108]	@ (80027a8 <SPI_EndRxTxTransaction+0xa4>)
 800273c:	fba2 2303 	umull	r2, r3, r2, r3
 8002740:	0d5b      	lsrs	r3, r3, #21
 8002742:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002746:	fb02 f303 	mul.w	r3, r2, r3
 800274a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002754:	d112      	bne.n	800277c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2200      	movs	r2, #0
 800275e:	2180      	movs	r1, #128	@ 0x80
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f7ff fee1 	bl	8002528 <SPI_WaitFlagStateUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d016      	beq.n	800279a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002770:	f043 0220 	orr.w	r2, r3, #32
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e00f      	b.n	800279c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	3b01      	subs	r3, #1
 8002786:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002792:	2b80      	cmp	r3, #128	@ 0x80
 8002794:	d0f2      	beq.n	800277c <SPI_EndRxTxTransaction+0x78>
 8002796:	e000      	b.n	800279a <SPI_EndRxTxTransaction+0x96>
        break;
 8002798:	bf00      	nop
  }

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000000 	.word	0x20000000
 80027a8:	165e9f81 	.word	0x165e9f81

080027ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e042      	b.n	8002844 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7fe f8f8 	bl	80009c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2224      	movs	r2, #36	@ 0x24
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 fdbd 	bl	8003370 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	691a      	ldr	r2, [r3, #16]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002804:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002814:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002824:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	@ 0x28
 8002850:	af02      	add	r7, sp, #8
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	4613      	mov	r3, r2
 800285a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b20      	cmp	r3, #32
 800286a:	d175      	bne.n	8002958 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_UART_Transmit+0x2c>
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e06e      	b.n	800295a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2221      	movs	r2, #33	@ 0x21
 8002886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800288a:	f7fe f9ff 	bl	8000c8c <HAL_GetTick>
 800288e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	88fa      	ldrh	r2, [r7, #6]
 8002894:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	88fa      	ldrh	r2, [r7, #6]
 800289a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028a4:	d108      	bne.n	80028b8 <HAL_UART_Transmit+0x6c>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d104      	bne.n	80028b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	61bb      	str	r3, [r7, #24]
 80028b6:	e003      	b.n	80028c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028c0:	e02e      	b.n	8002920 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2200      	movs	r2, #0
 80028ca:	2180      	movs	r1, #128	@ 0x80
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 fb1f 	bl	8002f10 <UART_WaitOnFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e03a      	b.n	800295a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10b      	bne.n	8002902 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	3302      	adds	r3, #2
 80028fe:	61bb      	str	r3, [r7, #24]
 8002900:	e007      	b.n	8002912 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	781a      	ldrb	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	3301      	adds	r3, #1
 8002910:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002916:	b29b      	uxth	r3, r3
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1cb      	bne.n	80028c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2200      	movs	r2, #0
 8002932:	2140      	movs	r1, #64	@ 0x40
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 faeb 	bl	8002f10 <UART_WaitOnFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e006      	b.n	800295a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	e000      	b.n	800295a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002958:	2302      	movs	r3, #2
  }
}
 800295a:	4618      	mov	r0, r3
 800295c:	3720      	adds	r7, #32
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	4613      	mov	r3, r2
 800296e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b20      	cmp	r3, #32
 800297a:	d112      	bne.n	80029a2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <HAL_UART_Receive_IT+0x26>
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e00b      	b.n	80029a4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	461a      	mov	r2, r3
 8002996:	68b9      	ldr	r1, [r7, #8]
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 fb12 	bl	8002fc2 <UART_Start_Receive_IT>
 800299e:	4603      	mov	r3, r0
 80029a0:	e000      	b.n	80029a4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80029a2:	2302      	movs	r3, #2
  }
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b0ba      	sub	sp, #232	@ 0xe8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80029d8:	2300      	movs	r3, #0
 80029da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80029ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10f      	bne.n	8002a12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <HAL_UART_IRQHandler+0x66>
 80029fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a02:	f003 0320 	and.w	r3, r3, #32
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 fbf2 	bl	80031f4 <UART_Receive_IT>
      return;
 8002a10:	e25b      	b.n	8002eca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 80de 	beq.w	8002bd8 <HAL_UART_IRQHandler+0x22c>
 8002a1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d106      	bne.n	8002a36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a2c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80d1 	beq.w	8002bd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00b      	beq.n	8002a5a <HAL_UART_IRQHandler+0xae>
 8002a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a52:	f043 0201 	orr.w	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00b      	beq.n	8002a7e <HAL_UART_IRQHandler+0xd2>
 8002a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a76:	f043 0202 	orr.w	r2, r3, #2
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <HAL_UART_IRQHandler+0xf6>
 8002a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9a:	f043 0204 	orr.w	r2, r3, #4
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d011      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x126>
 8002aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ab2:	f003 0320 	and.w	r3, r3, #32
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d105      	bne.n	8002ac6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aca:	f043 0208 	orr.w	r2, r3, #8
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 81f2 	beq.w	8002ec0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_UART_IRQHandler+0x14e>
 8002ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aec:	f003 0320 	and.w	r3, r3, #32
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d002      	beq.n	8002afa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 fb7d 	bl	80031f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b04:	2b40      	cmp	r3, #64	@ 0x40
 8002b06:	bf0c      	ite	eq
 8002b08:	2301      	moveq	r3, #1
 8002b0a:	2300      	movne	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d103      	bne.n	8002b26 <HAL_UART_IRQHandler+0x17a>
 8002b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d04f      	beq.n	8002bc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fa85 	bl	8003036 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b36:	2b40      	cmp	r3, #64	@ 0x40
 8002b38:	d141      	bne.n	8002bbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	3314      	adds	r3, #20
 8002b40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b48:	e853 3f00 	ldrex	r3, [r3]
 8002b4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3314      	adds	r3, #20
 8002b62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b66:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b76:	e841 2300 	strex	r3, r2, [r1]
 8002b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1d9      	bne.n	8002b3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d013      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b92:	4a7e      	ldr	r2, [pc, #504]	@ (8002d8c <HAL_UART_IRQHandler+0x3e0>)
 8002b94:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fe fa03 	bl	8000fa6 <HAL_DMA_Abort_IT>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d016      	beq.n	8002bd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb4:	e00e      	b.n	8002bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f994 	bl	8002ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bbc:	e00a      	b.n	8002bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f990 	bl	8002ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc4:	e006      	b.n	8002bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f98c 	bl	8002ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002bd2:	e175      	b.n	8002ec0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd4:	bf00      	nop
    return;
 8002bd6:	e173      	b.n	8002ec0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	f040 814f 	bne.w	8002e80 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8148 	beq.w	8002e80 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 8141 	beq.w	8002e80 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c1e:	2b40      	cmp	r3, #64	@ 0x40
 8002c20:	f040 80b6 	bne.w	8002d90 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 8145 	beq.w	8002ec4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002c3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c42:	429a      	cmp	r2, r3
 8002c44:	f080 813e 	bcs.w	8002ec4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c5a:	f000 8088 	beq.w	8002d6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	330c      	adds	r3, #12
 8002c64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c6c:	e853 3f00 	ldrex	r3, [r3]
 8002c70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	330c      	adds	r3, #12
 8002c86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002c8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c92:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c9a:	e841 2300 	strex	r3, r2, [r1]
 8002c9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1d9      	bne.n	8002c5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	3314      	adds	r3, #20
 8002cb0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cb4:	e853 3f00 	ldrex	r3, [r3]
 8002cb8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002cba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cbc:	f023 0301 	bic.w	r3, r3, #1
 8002cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3314      	adds	r3, #20
 8002cca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002cce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002cd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002cd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002cda:	e841 2300 	strex	r3, r2, [r1]
 8002cde:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002ce0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1e1      	bne.n	8002caa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3314      	adds	r3, #20
 8002cec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cf0:	e853 3f00 	ldrex	r3, [r3]
 8002cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002cf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	3314      	adds	r3, #20
 8002d06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002d0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002d10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d12:	e841 2300 	strex	r3, r2, [r1]
 8002d16:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002d18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1e3      	bne.n	8002ce6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	330c      	adds	r3, #12
 8002d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d36:	e853 3f00 	ldrex	r3, [r3]
 8002d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d3e:	f023 0310 	bic.w	r3, r3, #16
 8002d42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	330c      	adds	r3, #12
 8002d4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002d50:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d52:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d58:	e841 2300 	strex	r3, r2, [r1]
 8002d5c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1e3      	bne.n	8002d2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fe f8ac 	bl	8000ec6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2202      	movs	r2, #2
 8002d72:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	4619      	mov	r1, r3
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f8b7 	bl	8002ef8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d8a:	e09b      	b.n	8002ec4 <HAL_UART_IRQHandler+0x518>
 8002d8c:	080030fd 	.word	0x080030fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 808e 	beq.w	8002ec8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002dac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 8089 	beq.w	8002ec8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	330c      	adds	r3, #12
 8002dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc0:	e853 3f00 	ldrex	r3, [r3]
 8002dc4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002dcc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	330c      	adds	r3, #12
 8002dd6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002dda:	647a      	str	r2, [r7, #68]	@ 0x44
 8002ddc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dde:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002de0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002de2:	e841 2300 	strex	r3, r2, [r1]
 8002de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1e3      	bne.n	8002db6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3314      	adds	r3, #20
 8002df4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df8:	e853 3f00 	ldrex	r3, [r3]
 8002dfc:	623b      	str	r3, [r7, #32]
   return(result);
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3314      	adds	r3, #20
 8002e0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e12:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e1a:	e841 2300 	strex	r3, r2, [r1]
 8002e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1e3      	bne.n	8002dee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	330c      	adds	r3, #12
 8002e3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	e853 3f00 	ldrex	r3, [r3]
 8002e42:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f023 0310 	bic.w	r3, r3, #16
 8002e4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	330c      	adds	r3, #12
 8002e54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002e58:	61fa      	str	r2, [r7, #28]
 8002e5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5c:	69b9      	ldr	r1, [r7, #24]
 8002e5e:	69fa      	ldr	r2, [r7, #28]
 8002e60:	e841 2300 	strex	r3, r2, [r1]
 8002e64:	617b      	str	r3, [r7, #20]
   return(result);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1e3      	bne.n	8002e34 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e76:	4619      	mov	r1, r3
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f83d 	bl	8002ef8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e7e:	e023      	b.n	8002ec8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d009      	beq.n	8002ea0 <HAL_UART_IRQHandler+0x4f4>
 8002e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f943 	bl	8003124 <UART_Transmit_IT>
    return;
 8002e9e:	e014      	b.n	8002eca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00e      	beq.n	8002eca <HAL_UART_IRQHandler+0x51e>
 8002eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f983 	bl	80031c4 <UART_EndTransmit_IT>
    return;
 8002ebe:	e004      	b.n	8002eca <HAL_UART_IRQHandler+0x51e>
    return;
 8002ec0:	bf00      	nop
 8002ec2:	e002      	b.n	8002eca <HAL_UART_IRQHandler+0x51e>
      return;
 8002ec4:	bf00      	nop
 8002ec6:	e000      	b.n	8002eca <HAL_UART_IRQHandler+0x51e>
      return;
 8002ec8:	bf00      	nop
  }
}
 8002eca:	37e8      	adds	r7, #232	@ 0xe8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	603b      	str	r3, [r7, #0]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f20:	e03b      	b.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f28:	d037      	beq.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2a:	f7fd feaf 	bl	8000c8c <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	6a3a      	ldr	r2, [r7, #32]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d302      	bcc.n	8002f40 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e03a      	b.n	8002fba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d023      	beq.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2b80      	cmp	r3, #128	@ 0x80
 8002f56:	d020      	beq.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b40      	cmp	r3, #64	@ 0x40
 8002f5c:	d01d      	beq.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d116      	bne.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f857 	bl	8003036 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2208      	movs	r2, #8
 8002f8c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e00f      	b.n	8002fba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	bf0c      	ite	eq
 8002faa:	2301      	moveq	r3, #1
 8002fac:	2300      	movne	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d0b4      	beq.n	8002f22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b085      	sub	sp, #20
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	60f8      	str	r0, [r7, #12]
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	88fa      	ldrh	r2, [r7, #6]
 8002fda:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	88fa      	ldrh	r2, [r7, #6]
 8002fe0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2222      	movs	r2, #34	@ 0x22
 8002fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d007      	beq.n	8003008 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003006:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0220 	orr.w	r2, r2, #32
 8003026:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003036:	b480      	push	{r7}
 8003038:	b095      	sub	sp, #84	@ 0x54
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	330c      	adds	r3, #12
 8003044:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003048:	e853 3f00 	ldrex	r3, [r3]
 800304c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800304e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003050:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003054:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	330c      	adds	r3, #12
 800305c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800305e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003060:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003062:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003064:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003066:	e841 2300 	strex	r3, r2, [r1]
 800306a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800306c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1e5      	bne.n	800303e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	3314      	adds	r3, #20
 8003078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	e853 3f00 	ldrex	r3, [r3]
 8003080:	61fb      	str	r3, [r7, #28]
   return(result);
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f023 0301 	bic.w	r3, r3, #1
 8003088:	64bb      	str	r3, [r7, #72]	@ 0x48
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3314      	adds	r3, #20
 8003090:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003092:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003094:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003096:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003098:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800309a:	e841 2300 	strex	r3, r2, [r1]
 800309e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1e5      	bne.n	8003072 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d119      	bne.n	80030e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	330c      	adds	r3, #12
 80030b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	e853 3f00 	ldrex	r3, [r3]
 80030bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f023 0310 	bic.w	r3, r3, #16
 80030c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	330c      	adds	r3, #12
 80030cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030ce:	61ba      	str	r2, [r7, #24]
 80030d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d2:	6979      	ldr	r1, [r7, #20]
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	e841 2300 	strex	r3, r2, [r1]
 80030da:	613b      	str	r3, [r7, #16]
   return(result);
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1e5      	bne.n	80030ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80030f0:	bf00      	nop
 80030f2:	3754      	adds	r7, #84	@ 0x54
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003108:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f7ff fee4 	bl	8002ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b21      	cmp	r3, #33	@ 0x21
 8003136:	d13e      	bne.n	80031b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003140:	d114      	bne.n	800316c <UART_Transmit_IT+0x48>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d110      	bne.n	800316c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800315e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	1c9a      	adds	r2, r3, #2
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	621a      	str	r2, [r3, #32]
 800316a:	e008      	b.n	800317e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	1c59      	adds	r1, r3, #1
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6211      	str	r1, [r2, #32]
 8003176:	781a      	ldrb	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b29b      	uxth	r3, r3
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	4619      	mov	r1, r3
 800318c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10f      	bne.n	80031b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	e000      	b.n	80031b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031b6:	2302      	movs	r3, #2
  }
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7fd fb47 	bl	8000878 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08c      	sub	sp, #48	@ 0x30
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b22      	cmp	r3, #34	@ 0x22
 8003206:	f040 80ae 	bne.w	8003366 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003212:	d117      	bne.n	8003244 <UART_Receive_IT+0x50>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d113      	bne.n	8003244 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800321c:	2300      	movs	r3, #0
 800321e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003224:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	b29b      	uxth	r3, r3
 800322e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003232:	b29a      	uxth	r2, r3
 8003234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003236:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323c:	1c9a      	adds	r2, r3, #2
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	629a      	str	r2, [r3, #40]	@ 0x28
 8003242:	e026      	b.n	8003292 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003248:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800324a:	2300      	movs	r3, #0
 800324c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003256:	d007      	beq.n	8003268 <UART_Receive_IT+0x74>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10a      	bne.n	8003276 <UART_Receive_IT+0x82>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d106      	bne.n	8003276 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	b2da      	uxtb	r2, r3
 8003270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003272:	701a      	strb	r2, [r3, #0]
 8003274:	e008      	b.n	8003288 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	b2db      	uxtb	r3, r3
 800327e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003282:	b2da      	uxtb	r2, r3
 8003284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003286:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29b      	uxth	r3, r3
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	4619      	mov	r1, r3
 80032a0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d15d      	bne.n	8003362 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0220 	bic.w	r2, r2, #32
 80032b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695a      	ldr	r2, [r3, #20]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0201 	bic.w	r2, r2, #1
 80032d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2220      	movs	r2, #32
 80032da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d135      	bne.n	8003358 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	330c      	adds	r3, #12
 80032f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	e853 3f00 	ldrex	r3, [r3]
 8003300:	613b      	str	r3, [r7, #16]
   return(result);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f023 0310 	bic.w	r3, r3, #16
 8003308:	627b      	str	r3, [r7, #36]	@ 0x24
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	330c      	adds	r3, #12
 8003310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003312:	623a      	str	r2, [r7, #32]
 8003314:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003316:	69f9      	ldr	r1, [r7, #28]
 8003318:	6a3a      	ldr	r2, [r7, #32]
 800331a:	e841 2300 	strex	r3, r2, [r1]
 800331e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1e5      	bne.n	80032f2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	2b10      	cmp	r3, #16
 8003332:	d10a      	bne.n	800334a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800334e:	4619      	mov	r1, r3
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7ff fdd1 	bl	8002ef8 <HAL_UARTEx_RxEventCallback>
 8003356:	e002      	b.n	800335e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff fdb9 	bl	8002ed0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	e002      	b.n	8003368 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	e000      	b.n	8003368 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003366:	2302      	movs	r3, #2
  }
}
 8003368:	4618      	mov	r0, r3
 800336a:	3730      	adds	r7, #48	@ 0x30
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003374:	b0c0      	sub	sp, #256	@ 0x100
 8003376:	af00      	add	r7, sp, #0
 8003378:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800338c:	68d9      	ldr	r1, [r3, #12]
 800338e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	ea40 0301 	orr.w	r3, r0, r1
 8003398:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800339a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80033c8:	f021 010c 	bic.w	r1, r1, #12
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80033d6:	430b      	orrs	r3, r1
 80033d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80033e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ea:	6999      	ldr	r1, [r3, #24]
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	ea40 0301 	orr.w	r3, r0, r1
 80033f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4b8f      	ldr	r3, [pc, #572]	@ (800363c <UART_SetConfig+0x2cc>)
 8003400:	429a      	cmp	r2, r3
 8003402:	d005      	beq.n	8003410 <UART_SetConfig+0xa0>
 8003404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	4b8d      	ldr	r3, [pc, #564]	@ (8003640 <UART_SetConfig+0x2d0>)
 800340c:	429a      	cmp	r2, r3
 800340e:	d104      	bne.n	800341a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003410:	f7fe fbe6 	bl	8001be0 <HAL_RCC_GetPCLK2Freq>
 8003414:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003418:	e003      	b.n	8003422 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800341a:	f7fe fbcd 	bl	8001bb8 <HAL_RCC_GetPCLK1Freq>
 800341e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800342c:	f040 810c 	bne.w	8003648 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003434:	2200      	movs	r2, #0
 8003436:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800343a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800343e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003442:	4622      	mov	r2, r4
 8003444:	462b      	mov	r3, r5
 8003446:	1891      	adds	r1, r2, r2
 8003448:	65b9      	str	r1, [r7, #88]	@ 0x58
 800344a:	415b      	adcs	r3, r3
 800344c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800344e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003452:	4621      	mov	r1, r4
 8003454:	eb12 0801 	adds.w	r8, r2, r1
 8003458:	4629      	mov	r1, r5
 800345a:	eb43 0901 	adc.w	r9, r3, r1
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800346a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800346e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003472:	4690      	mov	r8, r2
 8003474:	4699      	mov	r9, r3
 8003476:	4623      	mov	r3, r4
 8003478:	eb18 0303 	adds.w	r3, r8, r3
 800347c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003480:	462b      	mov	r3, r5
 8003482:	eb49 0303 	adc.w	r3, r9, r3
 8003486:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800348a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003496:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800349a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800349e:	460b      	mov	r3, r1
 80034a0:	18db      	adds	r3, r3, r3
 80034a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80034a4:	4613      	mov	r3, r2
 80034a6:	eb42 0303 	adc.w	r3, r2, r3
 80034aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80034ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80034b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80034b4:	f7fc fee4 	bl	8000280 <__aeabi_uldivmod>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4b61      	ldr	r3, [pc, #388]	@ (8003644 <UART_SetConfig+0x2d4>)
 80034be:	fba3 2302 	umull	r2, r3, r3, r2
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	011c      	lsls	r4, r3, #4
 80034c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034ca:	2200      	movs	r2, #0
 80034cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80034d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80034d8:	4642      	mov	r2, r8
 80034da:	464b      	mov	r3, r9
 80034dc:	1891      	adds	r1, r2, r2
 80034de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80034e0:	415b      	adcs	r3, r3
 80034e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80034e8:	4641      	mov	r1, r8
 80034ea:	eb12 0a01 	adds.w	sl, r2, r1
 80034ee:	4649      	mov	r1, r9
 80034f0:	eb43 0b01 	adc.w	fp, r3, r1
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003500:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003504:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003508:	4692      	mov	sl, r2
 800350a:	469b      	mov	fp, r3
 800350c:	4643      	mov	r3, r8
 800350e:	eb1a 0303 	adds.w	r3, sl, r3
 8003512:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003516:	464b      	mov	r3, r9
 8003518:	eb4b 0303 	adc.w	r3, fp, r3
 800351c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800352c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003530:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003534:	460b      	mov	r3, r1
 8003536:	18db      	adds	r3, r3, r3
 8003538:	643b      	str	r3, [r7, #64]	@ 0x40
 800353a:	4613      	mov	r3, r2
 800353c:	eb42 0303 	adc.w	r3, r2, r3
 8003540:	647b      	str	r3, [r7, #68]	@ 0x44
 8003542:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003546:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800354a:	f7fc fe99 	bl	8000280 <__aeabi_uldivmod>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4611      	mov	r1, r2
 8003554:	4b3b      	ldr	r3, [pc, #236]	@ (8003644 <UART_SetConfig+0x2d4>)
 8003556:	fba3 2301 	umull	r2, r3, r3, r1
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	2264      	movs	r2, #100	@ 0x64
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	1acb      	subs	r3, r1, r3
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800356a:	4b36      	ldr	r3, [pc, #216]	@ (8003644 <UART_SetConfig+0x2d4>)
 800356c:	fba3 2302 	umull	r2, r3, r3, r2
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003578:	441c      	add	r4, r3
 800357a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800357e:	2200      	movs	r2, #0
 8003580:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003584:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003588:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800358c:	4642      	mov	r2, r8
 800358e:	464b      	mov	r3, r9
 8003590:	1891      	adds	r1, r2, r2
 8003592:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003594:	415b      	adcs	r3, r3
 8003596:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003598:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800359c:	4641      	mov	r1, r8
 800359e:	1851      	adds	r1, r2, r1
 80035a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80035a2:	4649      	mov	r1, r9
 80035a4:	414b      	adcs	r3, r1
 80035a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80035b4:	4659      	mov	r1, fp
 80035b6:	00cb      	lsls	r3, r1, #3
 80035b8:	4651      	mov	r1, sl
 80035ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035be:	4651      	mov	r1, sl
 80035c0:	00ca      	lsls	r2, r1, #3
 80035c2:	4610      	mov	r0, r2
 80035c4:	4619      	mov	r1, r3
 80035c6:	4603      	mov	r3, r0
 80035c8:	4642      	mov	r2, r8
 80035ca:	189b      	adds	r3, r3, r2
 80035cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035d0:	464b      	mov	r3, r9
 80035d2:	460a      	mov	r2, r1
 80035d4:	eb42 0303 	adc.w	r3, r2, r3
 80035d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80035e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80035ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80035f0:	460b      	mov	r3, r1
 80035f2:	18db      	adds	r3, r3, r3
 80035f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035f6:	4613      	mov	r3, r2
 80035f8:	eb42 0303 	adc.w	r3, r2, r3
 80035fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003602:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003606:	f7fc fe3b 	bl	8000280 <__aeabi_uldivmod>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4b0d      	ldr	r3, [pc, #52]	@ (8003644 <UART_SetConfig+0x2d4>)
 8003610:	fba3 1302 	umull	r1, r3, r3, r2
 8003614:	095b      	lsrs	r3, r3, #5
 8003616:	2164      	movs	r1, #100	@ 0x64
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	3332      	adds	r3, #50	@ 0x32
 8003622:	4a08      	ldr	r2, [pc, #32]	@ (8003644 <UART_SetConfig+0x2d4>)
 8003624:	fba2 2303 	umull	r2, r3, r2, r3
 8003628:	095b      	lsrs	r3, r3, #5
 800362a:	f003 0207 	and.w	r2, r3, #7
 800362e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4422      	add	r2, r4
 8003636:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003638:	e106      	b.n	8003848 <UART_SetConfig+0x4d8>
 800363a:	bf00      	nop
 800363c:	40011000 	.word	0x40011000
 8003640:	40011400 	.word	0x40011400
 8003644:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800364c:	2200      	movs	r2, #0
 800364e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003652:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003656:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800365a:	4642      	mov	r2, r8
 800365c:	464b      	mov	r3, r9
 800365e:	1891      	adds	r1, r2, r2
 8003660:	6239      	str	r1, [r7, #32]
 8003662:	415b      	adcs	r3, r3
 8003664:	627b      	str	r3, [r7, #36]	@ 0x24
 8003666:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800366a:	4641      	mov	r1, r8
 800366c:	1854      	adds	r4, r2, r1
 800366e:	4649      	mov	r1, r9
 8003670:	eb43 0501 	adc.w	r5, r3, r1
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	00eb      	lsls	r3, r5, #3
 800367e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003682:	00e2      	lsls	r2, r4, #3
 8003684:	4614      	mov	r4, r2
 8003686:	461d      	mov	r5, r3
 8003688:	4643      	mov	r3, r8
 800368a:	18e3      	adds	r3, r4, r3
 800368c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003690:	464b      	mov	r3, r9
 8003692:	eb45 0303 	adc.w	r3, r5, r3
 8003696:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800369a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	f04f 0300 	mov.w	r3, #0
 80036b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80036b6:	4629      	mov	r1, r5
 80036b8:	008b      	lsls	r3, r1, #2
 80036ba:	4621      	mov	r1, r4
 80036bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036c0:	4621      	mov	r1, r4
 80036c2:	008a      	lsls	r2, r1, #2
 80036c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80036c8:	f7fc fdda 	bl	8000280 <__aeabi_uldivmod>
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	4b60      	ldr	r3, [pc, #384]	@ (8003854 <UART_SetConfig+0x4e4>)
 80036d2:	fba3 2302 	umull	r2, r3, r3, r2
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	011c      	lsls	r4, r3, #4
 80036da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036de:	2200      	movs	r2, #0
 80036e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80036e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80036ec:	4642      	mov	r2, r8
 80036ee:	464b      	mov	r3, r9
 80036f0:	1891      	adds	r1, r2, r2
 80036f2:	61b9      	str	r1, [r7, #24]
 80036f4:	415b      	adcs	r3, r3
 80036f6:	61fb      	str	r3, [r7, #28]
 80036f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036fc:	4641      	mov	r1, r8
 80036fe:	1851      	adds	r1, r2, r1
 8003700:	6139      	str	r1, [r7, #16]
 8003702:	4649      	mov	r1, r9
 8003704:	414b      	adcs	r3, r1
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003714:	4659      	mov	r1, fp
 8003716:	00cb      	lsls	r3, r1, #3
 8003718:	4651      	mov	r1, sl
 800371a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800371e:	4651      	mov	r1, sl
 8003720:	00ca      	lsls	r2, r1, #3
 8003722:	4610      	mov	r0, r2
 8003724:	4619      	mov	r1, r3
 8003726:	4603      	mov	r3, r0
 8003728:	4642      	mov	r2, r8
 800372a:	189b      	adds	r3, r3, r2
 800372c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003730:	464b      	mov	r3, r9
 8003732:	460a      	mov	r2, r1
 8003734:	eb42 0303 	adc.w	r3, r2, r3
 8003738:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003746:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003754:	4649      	mov	r1, r9
 8003756:	008b      	lsls	r3, r1, #2
 8003758:	4641      	mov	r1, r8
 800375a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800375e:	4641      	mov	r1, r8
 8003760:	008a      	lsls	r2, r1, #2
 8003762:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003766:	f7fc fd8b 	bl	8000280 <__aeabi_uldivmod>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4611      	mov	r1, r2
 8003770:	4b38      	ldr	r3, [pc, #224]	@ (8003854 <UART_SetConfig+0x4e4>)
 8003772:	fba3 2301 	umull	r2, r3, r3, r1
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	2264      	movs	r2, #100	@ 0x64
 800377a:	fb02 f303 	mul.w	r3, r2, r3
 800377e:	1acb      	subs	r3, r1, r3
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	3332      	adds	r3, #50	@ 0x32
 8003784:	4a33      	ldr	r2, [pc, #204]	@ (8003854 <UART_SetConfig+0x4e4>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003790:	441c      	add	r4, r3
 8003792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003796:	2200      	movs	r2, #0
 8003798:	673b      	str	r3, [r7, #112]	@ 0x70
 800379a:	677a      	str	r2, [r7, #116]	@ 0x74
 800379c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80037a0:	4642      	mov	r2, r8
 80037a2:	464b      	mov	r3, r9
 80037a4:	1891      	adds	r1, r2, r2
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	415b      	adcs	r3, r3
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037b0:	4641      	mov	r1, r8
 80037b2:	1851      	adds	r1, r2, r1
 80037b4:	6039      	str	r1, [r7, #0]
 80037b6:	4649      	mov	r1, r9
 80037b8:	414b      	adcs	r3, r1
 80037ba:	607b      	str	r3, [r7, #4]
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037c8:	4659      	mov	r1, fp
 80037ca:	00cb      	lsls	r3, r1, #3
 80037cc:	4651      	mov	r1, sl
 80037ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037d2:	4651      	mov	r1, sl
 80037d4:	00ca      	lsls	r2, r1, #3
 80037d6:	4610      	mov	r0, r2
 80037d8:	4619      	mov	r1, r3
 80037da:	4603      	mov	r3, r0
 80037dc:	4642      	mov	r2, r8
 80037de:	189b      	adds	r3, r3, r2
 80037e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037e2:	464b      	mov	r3, r9
 80037e4:	460a      	mov	r2, r1
 80037e6:	eb42 0303 	adc.w	r3, r2, r3
 80037ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80037f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003804:	4649      	mov	r1, r9
 8003806:	008b      	lsls	r3, r1, #2
 8003808:	4641      	mov	r1, r8
 800380a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800380e:	4641      	mov	r1, r8
 8003810:	008a      	lsls	r2, r1, #2
 8003812:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003816:	f7fc fd33 	bl	8000280 <__aeabi_uldivmod>
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	4b0d      	ldr	r3, [pc, #52]	@ (8003854 <UART_SetConfig+0x4e4>)
 8003820:	fba3 1302 	umull	r1, r3, r3, r2
 8003824:	095b      	lsrs	r3, r3, #5
 8003826:	2164      	movs	r1, #100	@ 0x64
 8003828:	fb01 f303 	mul.w	r3, r1, r3
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	3332      	adds	r3, #50	@ 0x32
 8003832:	4a08      	ldr	r2, [pc, #32]	@ (8003854 <UART_SetConfig+0x4e4>)
 8003834:	fba2 2303 	umull	r2, r3, r2, r3
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	f003 020f 	and.w	r2, r3, #15
 800383e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4422      	add	r2, r4
 8003846:	609a      	str	r2, [r3, #8]
}
 8003848:	bf00      	nop
 800384a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800384e:	46bd      	mov	sp, r7
 8003850:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003854:	51eb851f 	.word	0x51eb851f

08003858 <siprintf>:
 8003858:	b40e      	push	{r1, r2, r3}
 800385a:	b500      	push	{lr}
 800385c:	b09c      	sub	sp, #112	@ 0x70
 800385e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003860:	9002      	str	r0, [sp, #8]
 8003862:	9006      	str	r0, [sp, #24]
 8003864:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003868:	4809      	ldr	r0, [pc, #36]	@ (8003890 <siprintf+0x38>)
 800386a:	9107      	str	r1, [sp, #28]
 800386c:	9104      	str	r1, [sp, #16]
 800386e:	4909      	ldr	r1, [pc, #36]	@ (8003894 <siprintf+0x3c>)
 8003870:	f853 2b04 	ldr.w	r2, [r3], #4
 8003874:	9105      	str	r1, [sp, #20]
 8003876:	6800      	ldr	r0, [r0, #0]
 8003878:	9301      	str	r3, [sp, #4]
 800387a:	a902      	add	r1, sp, #8
 800387c:	f000 f994 	bl	8003ba8 <_svfiprintf_r>
 8003880:	9b02      	ldr	r3, [sp, #8]
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
 8003886:	b01c      	add	sp, #112	@ 0x70
 8003888:	f85d eb04 	ldr.w	lr, [sp], #4
 800388c:	b003      	add	sp, #12
 800388e:	4770      	bx	lr
 8003890:	2000000c 	.word	0x2000000c
 8003894:	ffff0208 	.word	0xffff0208

08003898 <memset>:
 8003898:	4402      	add	r2, r0
 800389a:	4603      	mov	r3, r0
 800389c:	4293      	cmp	r3, r2
 800389e:	d100      	bne.n	80038a2 <memset+0xa>
 80038a0:	4770      	bx	lr
 80038a2:	f803 1b01 	strb.w	r1, [r3], #1
 80038a6:	e7f9      	b.n	800389c <memset+0x4>

080038a8 <__errno>:
 80038a8:	4b01      	ldr	r3, [pc, #4]	@ (80038b0 <__errno+0x8>)
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	2000000c 	.word	0x2000000c

080038b4 <__libc_init_array>:
 80038b4:	b570      	push	{r4, r5, r6, lr}
 80038b6:	4d0d      	ldr	r5, [pc, #52]	@ (80038ec <__libc_init_array+0x38>)
 80038b8:	4c0d      	ldr	r4, [pc, #52]	@ (80038f0 <__libc_init_array+0x3c>)
 80038ba:	1b64      	subs	r4, r4, r5
 80038bc:	10a4      	asrs	r4, r4, #2
 80038be:	2600      	movs	r6, #0
 80038c0:	42a6      	cmp	r6, r4
 80038c2:	d109      	bne.n	80038d8 <__libc_init_array+0x24>
 80038c4:	4d0b      	ldr	r5, [pc, #44]	@ (80038f4 <__libc_init_array+0x40>)
 80038c6:	4c0c      	ldr	r4, [pc, #48]	@ (80038f8 <__libc_init_array+0x44>)
 80038c8:	f000 fc66 	bl	8004198 <_init>
 80038cc:	1b64      	subs	r4, r4, r5
 80038ce:	10a4      	asrs	r4, r4, #2
 80038d0:	2600      	movs	r6, #0
 80038d2:	42a6      	cmp	r6, r4
 80038d4:	d105      	bne.n	80038e2 <__libc_init_array+0x2e>
 80038d6:	bd70      	pop	{r4, r5, r6, pc}
 80038d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038dc:	4798      	blx	r3
 80038de:	3601      	adds	r6, #1
 80038e0:	e7ee      	b.n	80038c0 <__libc_init_array+0xc>
 80038e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e6:	4798      	blx	r3
 80038e8:	3601      	adds	r6, #1
 80038ea:	e7f2      	b.n	80038d2 <__libc_init_array+0x1e>
 80038ec:	0800421c 	.word	0x0800421c
 80038f0:	0800421c 	.word	0x0800421c
 80038f4:	0800421c 	.word	0x0800421c
 80038f8:	08004220 	.word	0x08004220

080038fc <__retarget_lock_acquire_recursive>:
 80038fc:	4770      	bx	lr

080038fe <__retarget_lock_release_recursive>:
 80038fe:	4770      	bx	lr

08003900 <_free_r>:
 8003900:	b538      	push	{r3, r4, r5, lr}
 8003902:	4605      	mov	r5, r0
 8003904:	2900      	cmp	r1, #0
 8003906:	d041      	beq.n	800398c <_free_r+0x8c>
 8003908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800390c:	1f0c      	subs	r4, r1, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	bfb8      	it	lt
 8003912:	18e4      	addlt	r4, r4, r3
 8003914:	f000 f8e0 	bl	8003ad8 <__malloc_lock>
 8003918:	4a1d      	ldr	r2, [pc, #116]	@ (8003990 <_free_r+0x90>)
 800391a:	6813      	ldr	r3, [r2, #0]
 800391c:	b933      	cbnz	r3, 800392c <_free_r+0x2c>
 800391e:	6063      	str	r3, [r4, #4]
 8003920:	6014      	str	r4, [r2, #0]
 8003922:	4628      	mov	r0, r5
 8003924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003928:	f000 b8dc 	b.w	8003ae4 <__malloc_unlock>
 800392c:	42a3      	cmp	r3, r4
 800392e:	d908      	bls.n	8003942 <_free_r+0x42>
 8003930:	6820      	ldr	r0, [r4, #0]
 8003932:	1821      	adds	r1, r4, r0
 8003934:	428b      	cmp	r3, r1
 8003936:	bf01      	itttt	eq
 8003938:	6819      	ldreq	r1, [r3, #0]
 800393a:	685b      	ldreq	r3, [r3, #4]
 800393c:	1809      	addeq	r1, r1, r0
 800393e:	6021      	streq	r1, [r4, #0]
 8003940:	e7ed      	b.n	800391e <_free_r+0x1e>
 8003942:	461a      	mov	r2, r3
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	b10b      	cbz	r3, 800394c <_free_r+0x4c>
 8003948:	42a3      	cmp	r3, r4
 800394a:	d9fa      	bls.n	8003942 <_free_r+0x42>
 800394c:	6811      	ldr	r1, [r2, #0]
 800394e:	1850      	adds	r0, r2, r1
 8003950:	42a0      	cmp	r0, r4
 8003952:	d10b      	bne.n	800396c <_free_r+0x6c>
 8003954:	6820      	ldr	r0, [r4, #0]
 8003956:	4401      	add	r1, r0
 8003958:	1850      	adds	r0, r2, r1
 800395a:	4283      	cmp	r3, r0
 800395c:	6011      	str	r1, [r2, #0]
 800395e:	d1e0      	bne.n	8003922 <_free_r+0x22>
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	6053      	str	r3, [r2, #4]
 8003966:	4408      	add	r0, r1
 8003968:	6010      	str	r0, [r2, #0]
 800396a:	e7da      	b.n	8003922 <_free_r+0x22>
 800396c:	d902      	bls.n	8003974 <_free_r+0x74>
 800396e:	230c      	movs	r3, #12
 8003970:	602b      	str	r3, [r5, #0]
 8003972:	e7d6      	b.n	8003922 <_free_r+0x22>
 8003974:	6820      	ldr	r0, [r4, #0]
 8003976:	1821      	adds	r1, r4, r0
 8003978:	428b      	cmp	r3, r1
 800397a:	bf04      	itt	eq
 800397c:	6819      	ldreq	r1, [r3, #0]
 800397e:	685b      	ldreq	r3, [r3, #4]
 8003980:	6063      	str	r3, [r4, #4]
 8003982:	bf04      	itt	eq
 8003984:	1809      	addeq	r1, r1, r0
 8003986:	6021      	streq	r1, [r4, #0]
 8003988:	6054      	str	r4, [r2, #4]
 800398a:	e7ca      	b.n	8003922 <_free_r+0x22>
 800398c:	bd38      	pop	{r3, r4, r5, pc}
 800398e:	bf00      	nop
 8003990:	200002a0 	.word	0x200002a0

08003994 <sbrk_aligned>:
 8003994:	b570      	push	{r4, r5, r6, lr}
 8003996:	4e0f      	ldr	r6, [pc, #60]	@ (80039d4 <sbrk_aligned+0x40>)
 8003998:	460c      	mov	r4, r1
 800399a:	6831      	ldr	r1, [r6, #0]
 800399c:	4605      	mov	r5, r0
 800399e:	b911      	cbnz	r1, 80039a6 <sbrk_aligned+0x12>
 80039a0:	f000 fba6 	bl	80040f0 <_sbrk_r>
 80039a4:	6030      	str	r0, [r6, #0]
 80039a6:	4621      	mov	r1, r4
 80039a8:	4628      	mov	r0, r5
 80039aa:	f000 fba1 	bl	80040f0 <_sbrk_r>
 80039ae:	1c43      	adds	r3, r0, #1
 80039b0:	d103      	bne.n	80039ba <sbrk_aligned+0x26>
 80039b2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80039b6:	4620      	mov	r0, r4
 80039b8:	bd70      	pop	{r4, r5, r6, pc}
 80039ba:	1cc4      	adds	r4, r0, #3
 80039bc:	f024 0403 	bic.w	r4, r4, #3
 80039c0:	42a0      	cmp	r0, r4
 80039c2:	d0f8      	beq.n	80039b6 <sbrk_aligned+0x22>
 80039c4:	1a21      	subs	r1, r4, r0
 80039c6:	4628      	mov	r0, r5
 80039c8:	f000 fb92 	bl	80040f0 <_sbrk_r>
 80039cc:	3001      	adds	r0, #1
 80039ce:	d1f2      	bne.n	80039b6 <sbrk_aligned+0x22>
 80039d0:	e7ef      	b.n	80039b2 <sbrk_aligned+0x1e>
 80039d2:	bf00      	nop
 80039d4:	2000029c 	.word	0x2000029c

080039d8 <_malloc_r>:
 80039d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039dc:	1ccd      	adds	r5, r1, #3
 80039de:	f025 0503 	bic.w	r5, r5, #3
 80039e2:	3508      	adds	r5, #8
 80039e4:	2d0c      	cmp	r5, #12
 80039e6:	bf38      	it	cc
 80039e8:	250c      	movcc	r5, #12
 80039ea:	2d00      	cmp	r5, #0
 80039ec:	4606      	mov	r6, r0
 80039ee:	db01      	blt.n	80039f4 <_malloc_r+0x1c>
 80039f0:	42a9      	cmp	r1, r5
 80039f2:	d904      	bls.n	80039fe <_malloc_r+0x26>
 80039f4:	230c      	movs	r3, #12
 80039f6:	6033      	str	r3, [r6, #0]
 80039f8:	2000      	movs	r0, #0
 80039fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ad4 <_malloc_r+0xfc>
 8003a02:	f000 f869 	bl	8003ad8 <__malloc_lock>
 8003a06:	f8d8 3000 	ldr.w	r3, [r8]
 8003a0a:	461c      	mov	r4, r3
 8003a0c:	bb44      	cbnz	r4, 8003a60 <_malloc_r+0x88>
 8003a0e:	4629      	mov	r1, r5
 8003a10:	4630      	mov	r0, r6
 8003a12:	f7ff ffbf 	bl	8003994 <sbrk_aligned>
 8003a16:	1c43      	adds	r3, r0, #1
 8003a18:	4604      	mov	r4, r0
 8003a1a:	d158      	bne.n	8003ace <_malloc_r+0xf6>
 8003a1c:	f8d8 4000 	ldr.w	r4, [r8]
 8003a20:	4627      	mov	r7, r4
 8003a22:	2f00      	cmp	r7, #0
 8003a24:	d143      	bne.n	8003aae <_malloc_r+0xd6>
 8003a26:	2c00      	cmp	r4, #0
 8003a28:	d04b      	beq.n	8003ac2 <_malloc_r+0xea>
 8003a2a:	6823      	ldr	r3, [r4, #0]
 8003a2c:	4639      	mov	r1, r7
 8003a2e:	4630      	mov	r0, r6
 8003a30:	eb04 0903 	add.w	r9, r4, r3
 8003a34:	f000 fb5c 	bl	80040f0 <_sbrk_r>
 8003a38:	4581      	cmp	r9, r0
 8003a3a:	d142      	bne.n	8003ac2 <_malloc_r+0xea>
 8003a3c:	6821      	ldr	r1, [r4, #0]
 8003a3e:	1a6d      	subs	r5, r5, r1
 8003a40:	4629      	mov	r1, r5
 8003a42:	4630      	mov	r0, r6
 8003a44:	f7ff ffa6 	bl	8003994 <sbrk_aligned>
 8003a48:	3001      	adds	r0, #1
 8003a4a:	d03a      	beq.n	8003ac2 <_malloc_r+0xea>
 8003a4c:	6823      	ldr	r3, [r4, #0]
 8003a4e:	442b      	add	r3, r5
 8003a50:	6023      	str	r3, [r4, #0]
 8003a52:	f8d8 3000 	ldr.w	r3, [r8]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	bb62      	cbnz	r2, 8003ab4 <_malloc_r+0xdc>
 8003a5a:	f8c8 7000 	str.w	r7, [r8]
 8003a5e:	e00f      	b.n	8003a80 <_malloc_r+0xa8>
 8003a60:	6822      	ldr	r2, [r4, #0]
 8003a62:	1b52      	subs	r2, r2, r5
 8003a64:	d420      	bmi.n	8003aa8 <_malloc_r+0xd0>
 8003a66:	2a0b      	cmp	r2, #11
 8003a68:	d917      	bls.n	8003a9a <_malloc_r+0xc2>
 8003a6a:	1961      	adds	r1, r4, r5
 8003a6c:	42a3      	cmp	r3, r4
 8003a6e:	6025      	str	r5, [r4, #0]
 8003a70:	bf18      	it	ne
 8003a72:	6059      	strne	r1, [r3, #4]
 8003a74:	6863      	ldr	r3, [r4, #4]
 8003a76:	bf08      	it	eq
 8003a78:	f8c8 1000 	streq.w	r1, [r8]
 8003a7c:	5162      	str	r2, [r4, r5]
 8003a7e:	604b      	str	r3, [r1, #4]
 8003a80:	4630      	mov	r0, r6
 8003a82:	f000 f82f 	bl	8003ae4 <__malloc_unlock>
 8003a86:	f104 000b 	add.w	r0, r4, #11
 8003a8a:	1d23      	adds	r3, r4, #4
 8003a8c:	f020 0007 	bic.w	r0, r0, #7
 8003a90:	1ac2      	subs	r2, r0, r3
 8003a92:	bf1c      	itt	ne
 8003a94:	1a1b      	subne	r3, r3, r0
 8003a96:	50a3      	strne	r3, [r4, r2]
 8003a98:	e7af      	b.n	80039fa <_malloc_r+0x22>
 8003a9a:	6862      	ldr	r2, [r4, #4]
 8003a9c:	42a3      	cmp	r3, r4
 8003a9e:	bf0c      	ite	eq
 8003aa0:	f8c8 2000 	streq.w	r2, [r8]
 8003aa4:	605a      	strne	r2, [r3, #4]
 8003aa6:	e7eb      	b.n	8003a80 <_malloc_r+0xa8>
 8003aa8:	4623      	mov	r3, r4
 8003aaa:	6864      	ldr	r4, [r4, #4]
 8003aac:	e7ae      	b.n	8003a0c <_malloc_r+0x34>
 8003aae:	463c      	mov	r4, r7
 8003ab0:	687f      	ldr	r7, [r7, #4]
 8003ab2:	e7b6      	b.n	8003a22 <_malloc_r+0x4a>
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	42a3      	cmp	r3, r4
 8003aba:	d1fb      	bne.n	8003ab4 <_malloc_r+0xdc>
 8003abc:	2300      	movs	r3, #0
 8003abe:	6053      	str	r3, [r2, #4]
 8003ac0:	e7de      	b.n	8003a80 <_malloc_r+0xa8>
 8003ac2:	230c      	movs	r3, #12
 8003ac4:	6033      	str	r3, [r6, #0]
 8003ac6:	4630      	mov	r0, r6
 8003ac8:	f000 f80c 	bl	8003ae4 <__malloc_unlock>
 8003acc:	e794      	b.n	80039f8 <_malloc_r+0x20>
 8003ace:	6005      	str	r5, [r0, #0]
 8003ad0:	e7d6      	b.n	8003a80 <_malloc_r+0xa8>
 8003ad2:	bf00      	nop
 8003ad4:	200002a0 	.word	0x200002a0

08003ad8 <__malloc_lock>:
 8003ad8:	4801      	ldr	r0, [pc, #4]	@ (8003ae0 <__malloc_lock+0x8>)
 8003ada:	f7ff bf0f 	b.w	80038fc <__retarget_lock_acquire_recursive>
 8003ade:	bf00      	nop
 8003ae0:	20000298 	.word	0x20000298

08003ae4 <__malloc_unlock>:
 8003ae4:	4801      	ldr	r0, [pc, #4]	@ (8003aec <__malloc_unlock+0x8>)
 8003ae6:	f7ff bf0a 	b.w	80038fe <__retarget_lock_release_recursive>
 8003aea:	bf00      	nop
 8003aec:	20000298 	.word	0x20000298

08003af0 <__ssputs_r>:
 8003af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003af4:	688e      	ldr	r6, [r1, #8]
 8003af6:	461f      	mov	r7, r3
 8003af8:	42be      	cmp	r6, r7
 8003afa:	680b      	ldr	r3, [r1, #0]
 8003afc:	4682      	mov	sl, r0
 8003afe:	460c      	mov	r4, r1
 8003b00:	4690      	mov	r8, r2
 8003b02:	d82d      	bhi.n	8003b60 <__ssputs_r+0x70>
 8003b04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003b0c:	d026      	beq.n	8003b5c <__ssputs_r+0x6c>
 8003b0e:	6965      	ldr	r5, [r4, #20]
 8003b10:	6909      	ldr	r1, [r1, #16]
 8003b12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b16:	eba3 0901 	sub.w	r9, r3, r1
 8003b1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b1e:	1c7b      	adds	r3, r7, #1
 8003b20:	444b      	add	r3, r9
 8003b22:	106d      	asrs	r5, r5, #1
 8003b24:	429d      	cmp	r5, r3
 8003b26:	bf38      	it	cc
 8003b28:	461d      	movcc	r5, r3
 8003b2a:	0553      	lsls	r3, r2, #21
 8003b2c:	d527      	bpl.n	8003b7e <__ssputs_r+0x8e>
 8003b2e:	4629      	mov	r1, r5
 8003b30:	f7ff ff52 	bl	80039d8 <_malloc_r>
 8003b34:	4606      	mov	r6, r0
 8003b36:	b360      	cbz	r0, 8003b92 <__ssputs_r+0xa2>
 8003b38:	6921      	ldr	r1, [r4, #16]
 8003b3a:	464a      	mov	r2, r9
 8003b3c:	f000 fae8 	bl	8004110 <memcpy>
 8003b40:	89a3      	ldrh	r3, [r4, #12]
 8003b42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b4a:	81a3      	strh	r3, [r4, #12]
 8003b4c:	6126      	str	r6, [r4, #16]
 8003b4e:	6165      	str	r5, [r4, #20]
 8003b50:	444e      	add	r6, r9
 8003b52:	eba5 0509 	sub.w	r5, r5, r9
 8003b56:	6026      	str	r6, [r4, #0]
 8003b58:	60a5      	str	r5, [r4, #8]
 8003b5a:	463e      	mov	r6, r7
 8003b5c:	42be      	cmp	r6, r7
 8003b5e:	d900      	bls.n	8003b62 <__ssputs_r+0x72>
 8003b60:	463e      	mov	r6, r7
 8003b62:	6820      	ldr	r0, [r4, #0]
 8003b64:	4632      	mov	r2, r6
 8003b66:	4641      	mov	r1, r8
 8003b68:	f000 faa8 	bl	80040bc <memmove>
 8003b6c:	68a3      	ldr	r3, [r4, #8]
 8003b6e:	1b9b      	subs	r3, r3, r6
 8003b70:	60a3      	str	r3, [r4, #8]
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	4433      	add	r3, r6
 8003b76:	6023      	str	r3, [r4, #0]
 8003b78:	2000      	movs	r0, #0
 8003b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b7e:	462a      	mov	r2, r5
 8003b80:	f000 fad4 	bl	800412c <_realloc_r>
 8003b84:	4606      	mov	r6, r0
 8003b86:	2800      	cmp	r0, #0
 8003b88:	d1e0      	bne.n	8003b4c <__ssputs_r+0x5c>
 8003b8a:	6921      	ldr	r1, [r4, #16]
 8003b8c:	4650      	mov	r0, sl
 8003b8e:	f7ff feb7 	bl	8003900 <_free_r>
 8003b92:	230c      	movs	r3, #12
 8003b94:	f8ca 3000 	str.w	r3, [sl]
 8003b98:	89a3      	ldrh	r3, [r4, #12]
 8003b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b9e:	81a3      	strh	r3, [r4, #12]
 8003ba0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ba4:	e7e9      	b.n	8003b7a <__ssputs_r+0x8a>
	...

08003ba8 <_svfiprintf_r>:
 8003ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bac:	4698      	mov	r8, r3
 8003bae:	898b      	ldrh	r3, [r1, #12]
 8003bb0:	061b      	lsls	r3, r3, #24
 8003bb2:	b09d      	sub	sp, #116	@ 0x74
 8003bb4:	4607      	mov	r7, r0
 8003bb6:	460d      	mov	r5, r1
 8003bb8:	4614      	mov	r4, r2
 8003bba:	d510      	bpl.n	8003bde <_svfiprintf_r+0x36>
 8003bbc:	690b      	ldr	r3, [r1, #16]
 8003bbe:	b973      	cbnz	r3, 8003bde <_svfiprintf_r+0x36>
 8003bc0:	2140      	movs	r1, #64	@ 0x40
 8003bc2:	f7ff ff09 	bl	80039d8 <_malloc_r>
 8003bc6:	6028      	str	r0, [r5, #0]
 8003bc8:	6128      	str	r0, [r5, #16]
 8003bca:	b930      	cbnz	r0, 8003bda <_svfiprintf_r+0x32>
 8003bcc:	230c      	movs	r3, #12
 8003bce:	603b      	str	r3, [r7, #0]
 8003bd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003bd4:	b01d      	add	sp, #116	@ 0x74
 8003bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bda:	2340      	movs	r3, #64	@ 0x40
 8003bdc:	616b      	str	r3, [r5, #20]
 8003bde:	2300      	movs	r3, #0
 8003be0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003be2:	2320      	movs	r3, #32
 8003be4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003be8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bec:	2330      	movs	r3, #48	@ 0x30
 8003bee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003d8c <_svfiprintf_r+0x1e4>
 8003bf2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003bf6:	f04f 0901 	mov.w	r9, #1
 8003bfa:	4623      	mov	r3, r4
 8003bfc:	469a      	mov	sl, r3
 8003bfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c02:	b10a      	cbz	r2, 8003c08 <_svfiprintf_r+0x60>
 8003c04:	2a25      	cmp	r2, #37	@ 0x25
 8003c06:	d1f9      	bne.n	8003bfc <_svfiprintf_r+0x54>
 8003c08:	ebba 0b04 	subs.w	fp, sl, r4
 8003c0c:	d00b      	beq.n	8003c26 <_svfiprintf_r+0x7e>
 8003c0e:	465b      	mov	r3, fp
 8003c10:	4622      	mov	r2, r4
 8003c12:	4629      	mov	r1, r5
 8003c14:	4638      	mov	r0, r7
 8003c16:	f7ff ff6b 	bl	8003af0 <__ssputs_r>
 8003c1a:	3001      	adds	r0, #1
 8003c1c:	f000 80a7 	beq.w	8003d6e <_svfiprintf_r+0x1c6>
 8003c20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c22:	445a      	add	r2, fp
 8003c24:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c26:	f89a 3000 	ldrb.w	r3, [sl]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 809f 	beq.w	8003d6e <_svfiprintf_r+0x1c6>
 8003c30:	2300      	movs	r3, #0
 8003c32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c3a:	f10a 0a01 	add.w	sl, sl, #1
 8003c3e:	9304      	str	r3, [sp, #16]
 8003c40:	9307      	str	r3, [sp, #28]
 8003c42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c46:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c48:	4654      	mov	r4, sl
 8003c4a:	2205      	movs	r2, #5
 8003c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c50:	484e      	ldr	r0, [pc, #312]	@ (8003d8c <_svfiprintf_r+0x1e4>)
 8003c52:	f7fc fac5 	bl	80001e0 <memchr>
 8003c56:	9a04      	ldr	r2, [sp, #16]
 8003c58:	b9d8      	cbnz	r0, 8003c92 <_svfiprintf_r+0xea>
 8003c5a:	06d0      	lsls	r0, r2, #27
 8003c5c:	bf44      	itt	mi
 8003c5e:	2320      	movmi	r3, #32
 8003c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c64:	0711      	lsls	r1, r2, #28
 8003c66:	bf44      	itt	mi
 8003c68:	232b      	movmi	r3, #43	@ 0x2b
 8003c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c72:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c74:	d015      	beq.n	8003ca2 <_svfiprintf_r+0xfa>
 8003c76:	9a07      	ldr	r2, [sp, #28]
 8003c78:	4654      	mov	r4, sl
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f04f 0c0a 	mov.w	ip, #10
 8003c80:	4621      	mov	r1, r4
 8003c82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c86:	3b30      	subs	r3, #48	@ 0x30
 8003c88:	2b09      	cmp	r3, #9
 8003c8a:	d94b      	bls.n	8003d24 <_svfiprintf_r+0x17c>
 8003c8c:	b1b0      	cbz	r0, 8003cbc <_svfiprintf_r+0x114>
 8003c8e:	9207      	str	r2, [sp, #28]
 8003c90:	e014      	b.n	8003cbc <_svfiprintf_r+0x114>
 8003c92:	eba0 0308 	sub.w	r3, r0, r8
 8003c96:	fa09 f303 	lsl.w	r3, r9, r3
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	9304      	str	r3, [sp, #16]
 8003c9e:	46a2      	mov	sl, r4
 8003ca0:	e7d2      	b.n	8003c48 <_svfiprintf_r+0xa0>
 8003ca2:	9b03      	ldr	r3, [sp, #12]
 8003ca4:	1d19      	adds	r1, r3, #4
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	9103      	str	r1, [sp, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	bfbb      	ittet	lt
 8003cae:	425b      	neglt	r3, r3
 8003cb0:	f042 0202 	orrlt.w	r2, r2, #2
 8003cb4:	9307      	strge	r3, [sp, #28]
 8003cb6:	9307      	strlt	r3, [sp, #28]
 8003cb8:	bfb8      	it	lt
 8003cba:	9204      	strlt	r2, [sp, #16]
 8003cbc:	7823      	ldrb	r3, [r4, #0]
 8003cbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cc0:	d10a      	bne.n	8003cd8 <_svfiprintf_r+0x130>
 8003cc2:	7863      	ldrb	r3, [r4, #1]
 8003cc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cc6:	d132      	bne.n	8003d2e <_svfiprintf_r+0x186>
 8003cc8:	9b03      	ldr	r3, [sp, #12]
 8003cca:	1d1a      	adds	r2, r3, #4
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	9203      	str	r2, [sp, #12]
 8003cd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003cd4:	3402      	adds	r4, #2
 8003cd6:	9305      	str	r3, [sp, #20]
 8003cd8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003d9c <_svfiprintf_r+0x1f4>
 8003cdc:	7821      	ldrb	r1, [r4, #0]
 8003cde:	2203      	movs	r2, #3
 8003ce0:	4650      	mov	r0, sl
 8003ce2:	f7fc fa7d 	bl	80001e0 <memchr>
 8003ce6:	b138      	cbz	r0, 8003cf8 <_svfiprintf_r+0x150>
 8003ce8:	9b04      	ldr	r3, [sp, #16]
 8003cea:	eba0 000a 	sub.w	r0, r0, sl
 8003cee:	2240      	movs	r2, #64	@ 0x40
 8003cf0:	4082      	lsls	r2, r0
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	3401      	adds	r4, #1
 8003cf6:	9304      	str	r3, [sp, #16]
 8003cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cfc:	4824      	ldr	r0, [pc, #144]	@ (8003d90 <_svfiprintf_r+0x1e8>)
 8003cfe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d02:	2206      	movs	r2, #6
 8003d04:	f7fc fa6c 	bl	80001e0 <memchr>
 8003d08:	2800      	cmp	r0, #0
 8003d0a:	d036      	beq.n	8003d7a <_svfiprintf_r+0x1d2>
 8003d0c:	4b21      	ldr	r3, [pc, #132]	@ (8003d94 <_svfiprintf_r+0x1ec>)
 8003d0e:	bb1b      	cbnz	r3, 8003d58 <_svfiprintf_r+0x1b0>
 8003d10:	9b03      	ldr	r3, [sp, #12]
 8003d12:	3307      	adds	r3, #7
 8003d14:	f023 0307 	bic.w	r3, r3, #7
 8003d18:	3308      	adds	r3, #8
 8003d1a:	9303      	str	r3, [sp, #12]
 8003d1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d1e:	4433      	add	r3, r6
 8003d20:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d22:	e76a      	b.n	8003bfa <_svfiprintf_r+0x52>
 8003d24:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d28:	460c      	mov	r4, r1
 8003d2a:	2001      	movs	r0, #1
 8003d2c:	e7a8      	b.n	8003c80 <_svfiprintf_r+0xd8>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	3401      	adds	r4, #1
 8003d32:	9305      	str	r3, [sp, #20]
 8003d34:	4619      	mov	r1, r3
 8003d36:	f04f 0c0a 	mov.w	ip, #10
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d40:	3a30      	subs	r2, #48	@ 0x30
 8003d42:	2a09      	cmp	r2, #9
 8003d44:	d903      	bls.n	8003d4e <_svfiprintf_r+0x1a6>
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0c6      	beq.n	8003cd8 <_svfiprintf_r+0x130>
 8003d4a:	9105      	str	r1, [sp, #20]
 8003d4c:	e7c4      	b.n	8003cd8 <_svfiprintf_r+0x130>
 8003d4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d52:	4604      	mov	r4, r0
 8003d54:	2301      	movs	r3, #1
 8003d56:	e7f0      	b.n	8003d3a <_svfiprintf_r+0x192>
 8003d58:	ab03      	add	r3, sp, #12
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	462a      	mov	r2, r5
 8003d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d98 <_svfiprintf_r+0x1f0>)
 8003d60:	a904      	add	r1, sp, #16
 8003d62:	4638      	mov	r0, r7
 8003d64:	f3af 8000 	nop.w
 8003d68:	1c42      	adds	r2, r0, #1
 8003d6a:	4606      	mov	r6, r0
 8003d6c:	d1d6      	bne.n	8003d1c <_svfiprintf_r+0x174>
 8003d6e:	89ab      	ldrh	r3, [r5, #12]
 8003d70:	065b      	lsls	r3, r3, #25
 8003d72:	f53f af2d 	bmi.w	8003bd0 <_svfiprintf_r+0x28>
 8003d76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d78:	e72c      	b.n	8003bd4 <_svfiprintf_r+0x2c>
 8003d7a:	ab03      	add	r3, sp, #12
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	462a      	mov	r2, r5
 8003d80:	4b05      	ldr	r3, [pc, #20]	@ (8003d98 <_svfiprintf_r+0x1f0>)
 8003d82:	a904      	add	r1, sp, #16
 8003d84:	4638      	mov	r0, r7
 8003d86:	f000 f879 	bl	8003e7c <_printf_i>
 8003d8a:	e7ed      	b.n	8003d68 <_svfiprintf_r+0x1c0>
 8003d8c:	080041e0 	.word	0x080041e0
 8003d90:	080041ea 	.word	0x080041ea
 8003d94:	00000000 	.word	0x00000000
 8003d98:	08003af1 	.word	0x08003af1
 8003d9c:	080041e6 	.word	0x080041e6

08003da0 <_printf_common>:
 8003da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003da4:	4616      	mov	r6, r2
 8003da6:	4698      	mov	r8, r3
 8003da8:	688a      	ldr	r2, [r1, #8]
 8003daa:	690b      	ldr	r3, [r1, #16]
 8003dac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003db0:	4293      	cmp	r3, r2
 8003db2:	bfb8      	it	lt
 8003db4:	4613      	movlt	r3, r2
 8003db6:	6033      	str	r3, [r6, #0]
 8003db8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003dbc:	4607      	mov	r7, r0
 8003dbe:	460c      	mov	r4, r1
 8003dc0:	b10a      	cbz	r2, 8003dc6 <_printf_common+0x26>
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	6033      	str	r3, [r6, #0]
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	0699      	lsls	r1, r3, #26
 8003dca:	bf42      	ittt	mi
 8003dcc:	6833      	ldrmi	r3, [r6, #0]
 8003dce:	3302      	addmi	r3, #2
 8003dd0:	6033      	strmi	r3, [r6, #0]
 8003dd2:	6825      	ldr	r5, [r4, #0]
 8003dd4:	f015 0506 	ands.w	r5, r5, #6
 8003dd8:	d106      	bne.n	8003de8 <_printf_common+0x48>
 8003dda:	f104 0a19 	add.w	sl, r4, #25
 8003dde:	68e3      	ldr	r3, [r4, #12]
 8003de0:	6832      	ldr	r2, [r6, #0]
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	42ab      	cmp	r3, r5
 8003de6:	dc26      	bgt.n	8003e36 <_printf_common+0x96>
 8003de8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003dec:	6822      	ldr	r2, [r4, #0]
 8003dee:	3b00      	subs	r3, #0
 8003df0:	bf18      	it	ne
 8003df2:	2301      	movne	r3, #1
 8003df4:	0692      	lsls	r2, r2, #26
 8003df6:	d42b      	bmi.n	8003e50 <_printf_common+0xb0>
 8003df8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003dfc:	4641      	mov	r1, r8
 8003dfe:	4638      	mov	r0, r7
 8003e00:	47c8      	blx	r9
 8003e02:	3001      	adds	r0, #1
 8003e04:	d01e      	beq.n	8003e44 <_printf_common+0xa4>
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	6922      	ldr	r2, [r4, #16]
 8003e0a:	f003 0306 	and.w	r3, r3, #6
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	bf02      	ittt	eq
 8003e12:	68e5      	ldreq	r5, [r4, #12]
 8003e14:	6833      	ldreq	r3, [r6, #0]
 8003e16:	1aed      	subeq	r5, r5, r3
 8003e18:	68a3      	ldr	r3, [r4, #8]
 8003e1a:	bf0c      	ite	eq
 8003e1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e20:	2500      	movne	r5, #0
 8003e22:	4293      	cmp	r3, r2
 8003e24:	bfc4      	itt	gt
 8003e26:	1a9b      	subgt	r3, r3, r2
 8003e28:	18ed      	addgt	r5, r5, r3
 8003e2a:	2600      	movs	r6, #0
 8003e2c:	341a      	adds	r4, #26
 8003e2e:	42b5      	cmp	r5, r6
 8003e30:	d11a      	bne.n	8003e68 <_printf_common+0xc8>
 8003e32:	2000      	movs	r0, #0
 8003e34:	e008      	b.n	8003e48 <_printf_common+0xa8>
 8003e36:	2301      	movs	r3, #1
 8003e38:	4652      	mov	r2, sl
 8003e3a:	4641      	mov	r1, r8
 8003e3c:	4638      	mov	r0, r7
 8003e3e:	47c8      	blx	r9
 8003e40:	3001      	adds	r0, #1
 8003e42:	d103      	bne.n	8003e4c <_printf_common+0xac>
 8003e44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e4c:	3501      	adds	r5, #1
 8003e4e:	e7c6      	b.n	8003dde <_printf_common+0x3e>
 8003e50:	18e1      	adds	r1, r4, r3
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	2030      	movs	r0, #48	@ 0x30
 8003e56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e5a:	4422      	add	r2, r4
 8003e5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e64:	3302      	adds	r3, #2
 8003e66:	e7c7      	b.n	8003df8 <_printf_common+0x58>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	4622      	mov	r2, r4
 8003e6c:	4641      	mov	r1, r8
 8003e6e:	4638      	mov	r0, r7
 8003e70:	47c8      	blx	r9
 8003e72:	3001      	adds	r0, #1
 8003e74:	d0e6      	beq.n	8003e44 <_printf_common+0xa4>
 8003e76:	3601      	adds	r6, #1
 8003e78:	e7d9      	b.n	8003e2e <_printf_common+0x8e>
	...

08003e7c <_printf_i>:
 8003e7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e80:	7e0f      	ldrb	r7, [r1, #24]
 8003e82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e84:	2f78      	cmp	r7, #120	@ 0x78
 8003e86:	4691      	mov	r9, r2
 8003e88:	4680      	mov	r8, r0
 8003e8a:	460c      	mov	r4, r1
 8003e8c:	469a      	mov	sl, r3
 8003e8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e92:	d807      	bhi.n	8003ea4 <_printf_i+0x28>
 8003e94:	2f62      	cmp	r7, #98	@ 0x62
 8003e96:	d80a      	bhi.n	8003eae <_printf_i+0x32>
 8003e98:	2f00      	cmp	r7, #0
 8003e9a:	f000 80d2 	beq.w	8004042 <_printf_i+0x1c6>
 8003e9e:	2f58      	cmp	r7, #88	@ 0x58
 8003ea0:	f000 80b9 	beq.w	8004016 <_printf_i+0x19a>
 8003ea4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ea8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003eac:	e03a      	b.n	8003f24 <_printf_i+0xa8>
 8003eae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003eb2:	2b15      	cmp	r3, #21
 8003eb4:	d8f6      	bhi.n	8003ea4 <_printf_i+0x28>
 8003eb6:	a101      	add	r1, pc, #4	@ (adr r1, 8003ebc <_printf_i+0x40>)
 8003eb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ebc:	08003f15 	.word	0x08003f15
 8003ec0:	08003f29 	.word	0x08003f29
 8003ec4:	08003ea5 	.word	0x08003ea5
 8003ec8:	08003ea5 	.word	0x08003ea5
 8003ecc:	08003ea5 	.word	0x08003ea5
 8003ed0:	08003ea5 	.word	0x08003ea5
 8003ed4:	08003f29 	.word	0x08003f29
 8003ed8:	08003ea5 	.word	0x08003ea5
 8003edc:	08003ea5 	.word	0x08003ea5
 8003ee0:	08003ea5 	.word	0x08003ea5
 8003ee4:	08003ea5 	.word	0x08003ea5
 8003ee8:	08004029 	.word	0x08004029
 8003eec:	08003f53 	.word	0x08003f53
 8003ef0:	08003fe3 	.word	0x08003fe3
 8003ef4:	08003ea5 	.word	0x08003ea5
 8003ef8:	08003ea5 	.word	0x08003ea5
 8003efc:	0800404b 	.word	0x0800404b
 8003f00:	08003ea5 	.word	0x08003ea5
 8003f04:	08003f53 	.word	0x08003f53
 8003f08:	08003ea5 	.word	0x08003ea5
 8003f0c:	08003ea5 	.word	0x08003ea5
 8003f10:	08003feb 	.word	0x08003feb
 8003f14:	6833      	ldr	r3, [r6, #0]
 8003f16:	1d1a      	adds	r2, r3, #4
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6032      	str	r2, [r6, #0]
 8003f1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f24:	2301      	movs	r3, #1
 8003f26:	e09d      	b.n	8004064 <_printf_i+0x1e8>
 8003f28:	6833      	ldr	r3, [r6, #0]
 8003f2a:	6820      	ldr	r0, [r4, #0]
 8003f2c:	1d19      	adds	r1, r3, #4
 8003f2e:	6031      	str	r1, [r6, #0]
 8003f30:	0606      	lsls	r6, r0, #24
 8003f32:	d501      	bpl.n	8003f38 <_printf_i+0xbc>
 8003f34:	681d      	ldr	r5, [r3, #0]
 8003f36:	e003      	b.n	8003f40 <_printf_i+0xc4>
 8003f38:	0645      	lsls	r5, r0, #25
 8003f3a:	d5fb      	bpl.n	8003f34 <_printf_i+0xb8>
 8003f3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f40:	2d00      	cmp	r5, #0
 8003f42:	da03      	bge.n	8003f4c <_printf_i+0xd0>
 8003f44:	232d      	movs	r3, #45	@ 0x2d
 8003f46:	426d      	negs	r5, r5
 8003f48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f4c:	4859      	ldr	r0, [pc, #356]	@ (80040b4 <_printf_i+0x238>)
 8003f4e:	230a      	movs	r3, #10
 8003f50:	e011      	b.n	8003f76 <_printf_i+0xfa>
 8003f52:	6821      	ldr	r1, [r4, #0]
 8003f54:	6833      	ldr	r3, [r6, #0]
 8003f56:	0608      	lsls	r0, r1, #24
 8003f58:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f5c:	d402      	bmi.n	8003f64 <_printf_i+0xe8>
 8003f5e:	0649      	lsls	r1, r1, #25
 8003f60:	bf48      	it	mi
 8003f62:	b2ad      	uxthmi	r5, r5
 8003f64:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f66:	4853      	ldr	r0, [pc, #332]	@ (80040b4 <_printf_i+0x238>)
 8003f68:	6033      	str	r3, [r6, #0]
 8003f6a:	bf14      	ite	ne
 8003f6c:	230a      	movne	r3, #10
 8003f6e:	2308      	moveq	r3, #8
 8003f70:	2100      	movs	r1, #0
 8003f72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f76:	6866      	ldr	r6, [r4, #4]
 8003f78:	60a6      	str	r6, [r4, #8]
 8003f7a:	2e00      	cmp	r6, #0
 8003f7c:	bfa2      	ittt	ge
 8003f7e:	6821      	ldrge	r1, [r4, #0]
 8003f80:	f021 0104 	bicge.w	r1, r1, #4
 8003f84:	6021      	strge	r1, [r4, #0]
 8003f86:	b90d      	cbnz	r5, 8003f8c <_printf_i+0x110>
 8003f88:	2e00      	cmp	r6, #0
 8003f8a:	d04b      	beq.n	8004024 <_printf_i+0x1a8>
 8003f8c:	4616      	mov	r6, r2
 8003f8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f92:	fb03 5711 	mls	r7, r3, r1, r5
 8003f96:	5dc7      	ldrb	r7, [r0, r7]
 8003f98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f9c:	462f      	mov	r7, r5
 8003f9e:	42bb      	cmp	r3, r7
 8003fa0:	460d      	mov	r5, r1
 8003fa2:	d9f4      	bls.n	8003f8e <_printf_i+0x112>
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d10b      	bne.n	8003fc0 <_printf_i+0x144>
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	07df      	lsls	r7, r3, #31
 8003fac:	d508      	bpl.n	8003fc0 <_printf_i+0x144>
 8003fae:	6923      	ldr	r3, [r4, #16]
 8003fb0:	6861      	ldr	r1, [r4, #4]
 8003fb2:	4299      	cmp	r1, r3
 8003fb4:	bfde      	ittt	le
 8003fb6:	2330      	movle	r3, #48	@ 0x30
 8003fb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fbc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003fc0:	1b92      	subs	r2, r2, r6
 8003fc2:	6122      	str	r2, [r4, #16]
 8003fc4:	f8cd a000 	str.w	sl, [sp]
 8003fc8:	464b      	mov	r3, r9
 8003fca:	aa03      	add	r2, sp, #12
 8003fcc:	4621      	mov	r1, r4
 8003fce:	4640      	mov	r0, r8
 8003fd0:	f7ff fee6 	bl	8003da0 <_printf_common>
 8003fd4:	3001      	adds	r0, #1
 8003fd6:	d14a      	bne.n	800406e <_printf_i+0x1f2>
 8003fd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003fdc:	b004      	add	sp, #16
 8003fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	f043 0320 	orr.w	r3, r3, #32
 8003fe8:	6023      	str	r3, [r4, #0]
 8003fea:	4833      	ldr	r0, [pc, #204]	@ (80040b8 <_printf_i+0x23c>)
 8003fec:	2778      	movs	r7, #120	@ 0x78
 8003fee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	6831      	ldr	r1, [r6, #0]
 8003ff6:	061f      	lsls	r7, r3, #24
 8003ff8:	f851 5b04 	ldr.w	r5, [r1], #4
 8003ffc:	d402      	bmi.n	8004004 <_printf_i+0x188>
 8003ffe:	065f      	lsls	r7, r3, #25
 8004000:	bf48      	it	mi
 8004002:	b2ad      	uxthmi	r5, r5
 8004004:	6031      	str	r1, [r6, #0]
 8004006:	07d9      	lsls	r1, r3, #31
 8004008:	bf44      	itt	mi
 800400a:	f043 0320 	orrmi.w	r3, r3, #32
 800400e:	6023      	strmi	r3, [r4, #0]
 8004010:	b11d      	cbz	r5, 800401a <_printf_i+0x19e>
 8004012:	2310      	movs	r3, #16
 8004014:	e7ac      	b.n	8003f70 <_printf_i+0xf4>
 8004016:	4827      	ldr	r0, [pc, #156]	@ (80040b4 <_printf_i+0x238>)
 8004018:	e7e9      	b.n	8003fee <_printf_i+0x172>
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	f023 0320 	bic.w	r3, r3, #32
 8004020:	6023      	str	r3, [r4, #0]
 8004022:	e7f6      	b.n	8004012 <_printf_i+0x196>
 8004024:	4616      	mov	r6, r2
 8004026:	e7bd      	b.n	8003fa4 <_printf_i+0x128>
 8004028:	6833      	ldr	r3, [r6, #0]
 800402a:	6825      	ldr	r5, [r4, #0]
 800402c:	6961      	ldr	r1, [r4, #20]
 800402e:	1d18      	adds	r0, r3, #4
 8004030:	6030      	str	r0, [r6, #0]
 8004032:	062e      	lsls	r6, r5, #24
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	d501      	bpl.n	800403c <_printf_i+0x1c0>
 8004038:	6019      	str	r1, [r3, #0]
 800403a:	e002      	b.n	8004042 <_printf_i+0x1c6>
 800403c:	0668      	lsls	r0, r5, #25
 800403e:	d5fb      	bpl.n	8004038 <_printf_i+0x1bc>
 8004040:	8019      	strh	r1, [r3, #0]
 8004042:	2300      	movs	r3, #0
 8004044:	6123      	str	r3, [r4, #16]
 8004046:	4616      	mov	r6, r2
 8004048:	e7bc      	b.n	8003fc4 <_printf_i+0x148>
 800404a:	6833      	ldr	r3, [r6, #0]
 800404c:	1d1a      	adds	r2, r3, #4
 800404e:	6032      	str	r2, [r6, #0]
 8004050:	681e      	ldr	r6, [r3, #0]
 8004052:	6862      	ldr	r2, [r4, #4]
 8004054:	2100      	movs	r1, #0
 8004056:	4630      	mov	r0, r6
 8004058:	f7fc f8c2 	bl	80001e0 <memchr>
 800405c:	b108      	cbz	r0, 8004062 <_printf_i+0x1e6>
 800405e:	1b80      	subs	r0, r0, r6
 8004060:	6060      	str	r0, [r4, #4]
 8004062:	6863      	ldr	r3, [r4, #4]
 8004064:	6123      	str	r3, [r4, #16]
 8004066:	2300      	movs	r3, #0
 8004068:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800406c:	e7aa      	b.n	8003fc4 <_printf_i+0x148>
 800406e:	6923      	ldr	r3, [r4, #16]
 8004070:	4632      	mov	r2, r6
 8004072:	4649      	mov	r1, r9
 8004074:	4640      	mov	r0, r8
 8004076:	47d0      	blx	sl
 8004078:	3001      	adds	r0, #1
 800407a:	d0ad      	beq.n	8003fd8 <_printf_i+0x15c>
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	079b      	lsls	r3, r3, #30
 8004080:	d413      	bmi.n	80040aa <_printf_i+0x22e>
 8004082:	68e0      	ldr	r0, [r4, #12]
 8004084:	9b03      	ldr	r3, [sp, #12]
 8004086:	4298      	cmp	r0, r3
 8004088:	bfb8      	it	lt
 800408a:	4618      	movlt	r0, r3
 800408c:	e7a6      	b.n	8003fdc <_printf_i+0x160>
 800408e:	2301      	movs	r3, #1
 8004090:	4632      	mov	r2, r6
 8004092:	4649      	mov	r1, r9
 8004094:	4640      	mov	r0, r8
 8004096:	47d0      	blx	sl
 8004098:	3001      	adds	r0, #1
 800409a:	d09d      	beq.n	8003fd8 <_printf_i+0x15c>
 800409c:	3501      	adds	r5, #1
 800409e:	68e3      	ldr	r3, [r4, #12]
 80040a0:	9903      	ldr	r1, [sp, #12]
 80040a2:	1a5b      	subs	r3, r3, r1
 80040a4:	42ab      	cmp	r3, r5
 80040a6:	dcf2      	bgt.n	800408e <_printf_i+0x212>
 80040a8:	e7eb      	b.n	8004082 <_printf_i+0x206>
 80040aa:	2500      	movs	r5, #0
 80040ac:	f104 0619 	add.w	r6, r4, #25
 80040b0:	e7f5      	b.n	800409e <_printf_i+0x222>
 80040b2:	bf00      	nop
 80040b4:	080041f1 	.word	0x080041f1
 80040b8:	08004202 	.word	0x08004202

080040bc <memmove>:
 80040bc:	4288      	cmp	r0, r1
 80040be:	b510      	push	{r4, lr}
 80040c0:	eb01 0402 	add.w	r4, r1, r2
 80040c4:	d902      	bls.n	80040cc <memmove+0x10>
 80040c6:	4284      	cmp	r4, r0
 80040c8:	4623      	mov	r3, r4
 80040ca:	d807      	bhi.n	80040dc <memmove+0x20>
 80040cc:	1e43      	subs	r3, r0, #1
 80040ce:	42a1      	cmp	r1, r4
 80040d0:	d008      	beq.n	80040e4 <memmove+0x28>
 80040d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040da:	e7f8      	b.n	80040ce <memmove+0x12>
 80040dc:	4402      	add	r2, r0
 80040de:	4601      	mov	r1, r0
 80040e0:	428a      	cmp	r2, r1
 80040e2:	d100      	bne.n	80040e6 <memmove+0x2a>
 80040e4:	bd10      	pop	{r4, pc}
 80040e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040ee:	e7f7      	b.n	80040e0 <memmove+0x24>

080040f0 <_sbrk_r>:
 80040f0:	b538      	push	{r3, r4, r5, lr}
 80040f2:	4d06      	ldr	r5, [pc, #24]	@ (800410c <_sbrk_r+0x1c>)
 80040f4:	2300      	movs	r3, #0
 80040f6:	4604      	mov	r4, r0
 80040f8:	4608      	mov	r0, r1
 80040fa:	602b      	str	r3, [r5, #0]
 80040fc:	f7fc fcee 	bl	8000adc <_sbrk>
 8004100:	1c43      	adds	r3, r0, #1
 8004102:	d102      	bne.n	800410a <_sbrk_r+0x1a>
 8004104:	682b      	ldr	r3, [r5, #0]
 8004106:	b103      	cbz	r3, 800410a <_sbrk_r+0x1a>
 8004108:	6023      	str	r3, [r4, #0]
 800410a:	bd38      	pop	{r3, r4, r5, pc}
 800410c:	20000294 	.word	0x20000294

08004110 <memcpy>:
 8004110:	440a      	add	r2, r1
 8004112:	4291      	cmp	r1, r2
 8004114:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004118:	d100      	bne.n	800411c <memcpy+0xc>
 800411a:	4770      	bx	lr
 800411c:	b510      	push	{r4, lr}
 800411e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004122:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004126:	4291      	cmp	r1, r2
 8004128:	d1f9      	bne.n	800411e <memcpy+0xe>
 800412a:	bd10      	pop	{r4, pc}

0800412c <_realloc_r>:
 800412c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004130:	4680      	mov	r8, r0
 8004132:	4615      	mov	r5, r2
 8004134:	460c      	mov	r4, r1
 8004136:	b921      	cbnz	r1, 8004142 <_realloc_r+0x16>
 8004138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800413c:	4611      	mov	r1, r2
 800413e:	f7ff bc4b 	b.w	80039d8 <_malloc_r>
 8004142:	b92a      	cbnz	r2, 8004150 <_realloc_r+0x24>
 8004144:	f7ff fbdc 	bl	8003900 <_free_r>
 8004148:	2400      	movs	r4, #0
 800414a:	4620      	mov	r0, r4
 800414c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004150:	f000 f81a 	bl	8004188 <_malloc_usable_size_r>
 8004154:	4285      	cmp	r5, r0
 8004156:	4606      	mov	r6, r0
 8004158:	d802      	bhi.n	8004160 <_realloc_r+0x34>
 800415a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800415e:	d8f4      	bhi.n	800414a <_realloc_r+0x1e>
 8004160:	4629      	mov	r1, r5
 8004162:	4640      	mov	r0, r8
 8004164:	f7ff fc38 	bl	80039d8 <_malloc_r>
 8004168:	4607      	mov	r7, r0
 800416a:	2800      	cmp	r0, #0
 800416c:	d0ec      	beq.n	8004148 <_realloc_r+0x1c>
 800416e:	42b5      	cmp	r5, r6
 8004170:	462a      	mov	r2, r5
 8004172:	4621      	mov	r1, r4
 8004174:	bf28      	it	cs
 8004176:	4632      	movcs	r2, r6
 8004178:	f7ff ffca 	bl	8004110 <memcpy>
 800417c:	4621      	mov	r1, r4
 800417e:	4640      	mov	r0, r8
 8004180:	f7ff fbbe 	bl	8003900 <_free_r>
 8004184:	463c      	mov	r4, r7
 8004186:	e7e0      	b.n	800414a <_realloc_r+0x1e>

08004188 <_malloc_usable_size_r>:
 8004188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800418c:	1f18      	subs	r0, r3, #4
 800418e:	2b00      	cmp	r3, #0
 8004190:	bfbc      	itt	lt
 8004192:	580b      	ldrlt	r3, [r1, r0]
 8004194:	18c0      	addlt	r0, r0, r3
 8004196:	4770      	bx	lr

08004198 <_init>:
 8004198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419a:	bf00      	nop
 800419c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419e:	bc08      	pop	{r3}
 80041a0:	469e      	mov	lr, r3
 80041a2:	4770      	bx	lr

080041a4 <_fini>:
 80041a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a6:	bf00      	nop
 80041a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041aa:	bc08      	pop	{r3}
 80041ac:	469e      	mov	lr, r3
 80041ae:	4770      	bx	lr
