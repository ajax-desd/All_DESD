
prac_4_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ef0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003078  08003078  00004078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003090  08003090  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003090  08003090  00004090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003098  08003098  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003098  08003098  00004098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800309c  0800309c  0000409c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080030a0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000c4  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d0  200000d0  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c38c  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a66  00000000  00000000  000113c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb8  00000000  00000000  00012e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000933  00000000  00000000  000139e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000202eb  00000000  00000000  0001431b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cdba  00000000  00000000  00034606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c796f  00000000  00000000  000413c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00108d2f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003160  00000000  00000000  00108d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  0010bed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003060 	.word	0x08003060

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003060 	.word	0x08003060

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fb4c 	bl	8000b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f876 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f988 	bl	80007d8 <MX_GPIO_Init>
  MX_IWDG_Init();
 80004c8:	f000 f8d2 	bl	8000670 <MX_IWDG_Init>
  MX_UART5_Init();
 80004cc:	f000 f95a 	bl	8000784 <MX_UART5_Init>
  MX_TIM2_Init();
 80004d0:	f000 f8e8 	bl	80006a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80004d4:	2100      	movs	r1, #0
 80004d6:	4831      	ldr	r0, [pc, #196]	@ (800059c <main+0xe4>)
 80004d8:	f001 fc08 	bl	8001cec <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count = __HAL_TIM_GET_COUNTER(&htim2);
 80004dc:	4b2f      	ldr	r3, [pc, #188]	@ (800059c <main+0xe4>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004e2:	461a      	mov	r2, r3
 80004e4:	4b2e      	ldr	r3, [pc, #184]	@ (80005a0 <main+0xe8>)
 80004e6:	601a      	str	r2, [r3, #0]
	  if(ccr1 <= 3000)
 80004e8:	4b2e      	ldr	r3, [pc, #184]	@ (80005a4 <main+0xec>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80004f0:	4293      	cmp	r3, r2
 80004f2:	dc23      	bgt.n	800053c <main+0x84>
	  {
		  HAL_IWDG_Refresh(&hiwdg);
 80004f4:	482c      	ldr	r0, [pc, #176]	@ (80005a8 <main+0xf0>)
 80004f6:	f000 fee8 	bl	80012ca <HAL_IWDG_Refresh>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80004fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004fe:	482b      	ldr	r0, [pc, #172]	@ (80005ac <main+0xf4>)
 8000500:	f000 fe87 	bl	8001212 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8000504:	2064      	movs	r0, #100	@ 0x64
 8000506:	f000 fb99 	bl	8000c3c <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800050a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800050e:	4827      	ldr	r0, [pc, #156]	@ (80005ac <main+0xf4>)
 8000510:	f000 fe7f 	bl	8001212 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8000514:	2064      	movs	r0, #100	@ 0x64
 8000516:	f000 fb91 	bl	8000c3c <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800051a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800051e:	4823      	ldr	r0, [pc, #140]	@ (80005ac <main+0xf4>)
 8000520:	f000 fe77 	bl	8001212 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8000524:	2064      	movs	r0, #100	@ 0x64
 8000526:	f000 fb89 	bl	8000c3c <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800052a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800052e:	481f      	ldr	r0, [pc, #124]	@ (80005ac <main+0xf4>)
 8000530:	f000 fe6f 	bl	8001212 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8000534:	2064      	movs	r0, #100	@ 0x64
 8000536:	f000 fb81 	bl	8000c3c <HAL_Delay>
 800053a:	e7cf      	b.n	80004dc <main+0x24>
	  }
	  else if(ccr1 <= 6000 && ccr1 > 3000)
 800053c:	4b19      	ldr	r3, [pc, #100]	@ (80005a4 <main+0xec>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000544:	4293      	cmp	r3, r2
 8000546:	dcc9      	bgt.n	80004dc <main+0x24>
 8000548:	4b16      	ldr	r3, [pc, #88]	@ (80005a4 <main+0xec>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000550:	4293      	cmp	r3, r2
 8000552:	ddc3      	ble.n	80004dc <main+0x24>
	  {
		  HAL_IWDG_Refresh(&hiwdg);
 8000554:	4814      	ldr	r0, [pc, #80]	@ (80005a8 <main+0xf0>)
 8000556:	f000 feb8 	bl	80012ca <HAL_IWDG_Refresh>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800055a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800055e:	4813      	ldr	r0, [pc, #76]	@ (80005ac <main+0xf4>)
 8000560:	f000 fe57 	bl	8001212 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8000564:	2064      	movs	r0, #100	@ 0x64
 8000566:	f000 fb69 	bl	8000c3c <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800056a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800056e:	480f      	ldr	r0, [pc, #60]	@ (80005ac <main+0xf4>)
 8000570:	f000 fe4f 	bl	8001212 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8000574:	2064      	movs	r0, #100	@ 0x64
 8000576:	f000 fb61 	bl	8000c3c <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800057a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800057e:	480b      	ldr	r0, [pc, #44]	@ (80005ac <main+0xf4>)
 8000580:	f000 fe47 	bl	8001212 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8000584:	2064      	movs	r0, #100	@ 0x64
 8000586:	f000 fb59 	bl	8000c3c <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800058a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800058e:	4807      	ldr	r0, [pc, #28]	@ (80005ac <main+0xf4>)
 8000590:	f000 fe3f 	bl	8001212 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8000594:	2064      	movs	r0, #100	@ 0x64
 8000596:	f000 fb51 	bl	8000c3c <HAL_Delay>
	  count = __HAL_TIM_GET_COUNTER(&htim2);
 800059a:	e79f      	b.n	80004dc <main+0x24>
 800059c:	20000034 	.word	0x20000034
 80005a0:	200000c8 	.word	0x200000c8
 80005a4:	200000c4 	.word	0x200000c4
 80005a8:	20000028 	.word	0x20000028
 80005ac:	40020c00 	.word	0x40020c00

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	@ 0x50
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2230      	movs	r2, #48	@ 0x30
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 fd22 	bl	8003008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	4b23      	ldr	r3, [pc, #140]	@ (8000668 <SystemClock_Config+0xb8>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	4a22      	ldr	r2, [pc, #136]	@ (8000668 <SystemClock_Config+0xb8>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e4:	4b20      	ldr	r3, [pc, #128]	@ (8000668 <SystemClock_Config+0xb8>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	4b1d      	ldr	r3, [pc, #116]	@ (800066c <SystemClock_Config+0xbc>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a1c      	ldr	r2, [pc, #112]	@ (800066c <SystemClock_Config+0xbc>)
 80005fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	4b1a      	ldr	r3, [pc, #104]	@ (800066c <SystemClock_Config+0xbc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800060c:	230a      	movs	r3, #10
 800060e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000614:	2310      	movs	r3, #16
 8000616:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800061c:	2300      	movs	r3, #0
 800061e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	4618      	mov	r0, r3
 8000626:	f000 fe61 	bl	80012ec <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000630:	f000 f938 	bl	80008a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f001 f8c4 	bl	80017dc <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800065a:	f000 f923 	bl	80008a4 <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3750      	adds	r7, #80	@ 0x50
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000674:	4b09      	ldr	r3, [pc, #36]	@ (800069c <MX_IWDG_Init+0x2c>)
 8000676:	4a0a      	ldr	r2, [pc, #40]	@ (80006a0 <MX_IWDG_Init+0x30>)
 8000678:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800067a:	4b08      	ldr	r3, [pc, #32]	@ (800069c <MX_IWDG_Init+0x2c>)
 800067c:	2204      	movs	r2, #4
 800067e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <MX_IWDG_Init+0x2c>)
 8000682:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000686:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000688:	4804      	ldr	r0, [pc, #16]	@ (800069c <MX_IWDG_Init+0x2c>)
 800068a:	f000 fddc 	bl	8001246 <HAL_IWDG_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000694:	f000 f906 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000028 	.word	0x20000028
 80006a0:	40003000 	.word	0x40003000

080006a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	@ 0x28
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006aa:	f107 0318 	add.w	r3, r7, #24
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000780 <MX_TIM2_Init+0xdc>)
 80006d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000;
 80006d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000780 <MX_TIM2_Init+0xdc>)
 80006d8:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80006dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006de:	4b28      	ldr	r3, [pc, #160]	@ (8000780 <MX_TIM2_Init+0xdc>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80006e4:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <MX_TIM2_Init+0xdc>)
 80006e6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80006ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ec:	4b24      	ldr	r3, [pc, #144]	@ (8000780 <MX_TIM2_Init+0xdc>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f2:	4b23      	ldr	r3, [pc, #140]	@ (8000780 <MX_TIM2_Init+0xdc>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006f8:	4821      	ldr	r0, [pc, #132]	@ (8000780 <MX_TIM2_Init+0xdc>)
 80006fa:	f001 fa4f 	bl	8001b9c <HAL_TIM_Base_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000704:	f000 f8ce 	bl	80008a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000708:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800070e:	f107 0318 	add.w	r3, r7, #24
 8000712:	4619      	mov	r1, r3
 8000714:	481a      	ldr	r0, [pc, #104]	@ (8000780 <MX_TIM2_Init+0xdc>)
 8000716:	f001 fd9d 	bl	8002254 <HAL_TIM_ConfigClockSource>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000720:	f000 f8c0 	bl	80008a4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000724:	4816      	ldr	r0, [pc, #88]	@ (8000780 <MX_TIM2_Init+0xdc>)
 8000726:	f001 fa88 	bl	8001c3a <HAL_TIM_IC_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000730:	f000 f8b8 	bl	80008a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000734:	2300      	movs	r3, #0
 8000736:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	4619      	mov	r1, r3
 8000742:	480f      	ldr	r0, [pc, #60]	@ (8000780 <MX_TIM2_Init+0xdc>)
 8000744:	f002 f90c 	bl	8002960 <HAL_TIMEx_MasterConfigSynchronization>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800074e:	f000 f8a9 	bl	80008a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000756:	2301      	movs	r3, #1
 8000758:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000762:	463b      	mov	r3, r7
 8000764:	2200      	movs	r2, #0
 8000766:	4619      	mov	r1, r3
 8000768:	4805      	ldr	r0, [pc, #20]	@ (8000780 <MX_TIM2_Init+0xdc>)
 800076a:	f001 fcd7 	bl	800211c <HAL_TIM_IC_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000774:	f000 f896 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	3728      	adds	r7, #40	@ 0x28
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000034 	.word	0x20000034

08000784 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000788:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_UART5_Init+0x4c>)
 800078a:	4a12      	ldr	r2, [pc, #72]	@ (80007d4 <MX_UART5_Init+0x50>)
 800078c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800078e:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <MX_UART5_Init+0x4c>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_UART5_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_UART5_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <MX_UART5_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_UART5_Init+0x4c>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <MX_UART5_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_UART5_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_UART5_Init+0x4c>)
 80007bc:	f002 f960 	bl	8002a80 <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80007c6:	f000 f86d 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	2000007c 	.word	0x2000007c
 80007d4:	40005000 	.word	0x40005000

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	4b20      	ldr	r3, [pc, #128]	@ (8000874 <MX_GPIO_Init+0x9c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a1f      	ldr	r2, [pc, #124]	@ (8000874 <MX_GPIO_Init+0x9c>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000874 <MX_GPIO_Init+0x9c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <MX_GPIO_Init+0x9c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a18      	ldr	r2, [pc, #96]	@ (8000874 <MX_GPIO_Init+0x9c>)
 8000814:	f043 0308 	orr.w	r3, r3, #8
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <MX_GPIO_Init+0x9c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <MX_GPIO_Init+0x9c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a11      	ldr	r2, [pc, #68]	@ (8000874 <MX_GPIO_Init+0x9c>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_GPIO_Init+0x9c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000848:	480b      	ldr	r0, [pc, #44]	@ (8000878 <MX_GPIO_Init+0xa0>)
 800084a:	f000 fcc9 	bl	80011e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800084e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000852:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	4619      	mov	r1, r3
 8000866:	4804      	ldr	r0, [pc, #16]	@ (8000878 <MX_GPIO_Init+0xa0>)
 8000868:	f000 fb1e 	bl	8000ea8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086c:	bf00      	nop
 800086e:	3720      	adds	r7, #32
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40023800 	.word	0x40023800
 8000878:	40020c00 	.word	0x40020c00

0800087c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  ccr1 = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8000884:	4b05      	ldr	r3, [pc, #20]	@ (800089c <HAL_TIM_IC_CaptureCallback+0x20>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800088a:	461a      	mov	r2, r3
 800088c:	4b04      	ldr	r3, [pc, #16]	@ (80008a0 <HAL_TIM_IC_CaptureCallback+0x24>)
 800088e:	601a      	str	r2, [r3, #0]
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	20000034 	.word	0x20000034
 80008a0:	200000c4 	.word	0x200000c4

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <Error_Handler+0x8>

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008be:	4a0f      	ldr	r2, [pc, #60]	@ (80008fc <HAL_MspInit+0x4c>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008c6:	4b0d      	ldr	r3, [pc, #52]	@ (80008fc <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008da:	4a08      	ldr	r2, [pc, #32]	@ (80008fc <HAL_MspInit+0x4c>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e2:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	@ 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000920:	d133      	bne.n	800098a <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b1b      	ldr	r3, [pc, #108]	@ (8000994 <HAL_TIM_Base_MspInit+0x94>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	4a1a      	ldr	r2, [pc, #104]	@ (8000994 <HAL_TIM_Base_MspInit+0x94>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6413      	str	r3, [r2, #64]	@ 0x40
 8000932:	4b18      	ldr	r3, [pc, #96]	@ (8000994 <HAL_TIM_Base_MspInit+0x94>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <HAL_TIM_Base_MspInit+0x94>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a13      	ldr	r2, [pc, #76]	@ (8000994 <HAL_TIM_Base_MspInit+0x94>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <HAL_TIM_Base_MspInit+0x94>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800095a:	2301      	movs	r3, #1
 800095c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800096a:	2301      	movs	r3, #1
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	4808      	ldr	r0, [pc, #32]	@ (8000998 <HAL_TIM_Base_MspInit+0x98>)
 8000976:	f000 fa97 	bl	8000ea8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	201c      	movs	r0, #28
 8000980:	f000 fa5b 	bl	8000e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000984:	201c      	movs	r0, #28
 8000986:	f000 fa74 	bl	8000e72 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800098a:	bf00      	nop
 800098c:	3728      	adds	r7, #40	@ 0x28
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40020000 	.word	0x40020000

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	@ 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a28      	ldr	r2, [pc, #160]	@ (8000a5c <HAL_UART_MspInit+0xc0>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d14a      	bne.n	8000a54 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b27      	ldr	r3, [pc, #156]	@ (8000a60 <HAL_UART_MspInit+0xc4>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	4a26      	ldr	r2, [pc, #152]	@ (8000a60 <HAL_UART_MspInit+0xc4>)
 80009c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80009cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ce:	4b24      	ldr	r3, [pc, #144]	@ (8000a60 <HAL_UART_MspInit+0xc4>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b20      	ldr	r3, [pc, #128]	@ (8000a60 <HAL_UART_MspInit+0xc4>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a1f      	ldr	r2, [pc, #124]	@ (8000a60 <HAL_UART_MspInit+0xc4>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000a60 <HAL_UART_MspInit+0xc4>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	4b19      	ldr	r3, [pc, #100]	@ (8000a60 <HAL_UART_MspInit+0xc4>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a18      	ldr	r2, [pc, #96]	@ (8000a60 <HAL_UART_MspInit+0xc4>)
 8000a00:	f043 0308 	orr.w	r3, r3, #8
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b16      	ldr	r3, [pc, #88]	@ (8000a60 <HAL_UART_MspInit+0xc4>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0308 	and.w	r3, r3, #8
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000a24:	2308      	movs	r3, #8
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480d      	ldr	r0, [pc, #52]	@ (8000a64 <HAL_UART_MspInit+0xc8>)
 8000a30:	f000 fa3a 	bl	8000ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a34:	2304      	movs	r3, #4
 8000a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000a44:	2308      	movs	r3, #8
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4806      	ldr	r0, [pc, #24]	@ (8000a68 <HAL_UART_MspInit+0xcc>)
 8000a50:	f000 fa2a 	bl	8000ea8 <HAL_GPIO_Init>

  /* USER CODE END UART5_MspInit 1 */

  }

}
 8000a54:	bf00      	nop
 8000a56:	3728      	adds	r7, #40	@ 0x28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40005000 	.word	0x40005000
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020800 	.word	0x40020800
 8000a68:	40020c00 	.word	0x40020c00

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <NMI_Handler+0x4>

08000a74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <MemManage_Handler+0x4>

08000a84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac2:	f000 f89b 	bl	8000bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ad0:	4802      	ldr	r0, [pc, #8]	@ (8000adc <TIM2_IRQHandler+0x10>)
 8000ad2:	f001 fa33 	bl	8001f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000034 	.word	0x20000034

08000ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <SystemInit+0x20>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aea:	4a05      	ldr	r2, [pc, #20]	@ (8000b00 <SystemInit+0x20>)
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b08:	f7ff ffea 	bl	8000ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b0c:	480c      	ldr	r0, [pc, #48]	@ (8000b40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b0e:	490d      	ldr	r1, [pc, #52]	@ (8000b44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b10:	4a0d      	ldr	r2, [pc, #52]	@ (8000b48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0a      	ldr	r2, [pc, #40]	@ (8000b4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b24:	4c0a      	ldr	r4, [pc, #40]	@ (8000b50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b32:	f002 fa71 	bl	8003018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b36:	f7ff fcbf 	bl	80004b8 <main>
  bx  lr    
 8000b3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b48:	080030a0 	.word	0x080030a0
  ldr r2, =_sbss
 8000b4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b50:	200000d0 	.word	0x200000d0

08000b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC_IRQHandler>
	...

08000b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0d      	ldr	r2, [pc, #52]	@ (8000b98 <HAL_Init+0x40>)
 8000b62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b68:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <HAL_Init+0x40>)
 8000b6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b74:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a07      	ldr	r2, [pc, #28]	@ (8000b98 <HAL_Init+0x40>)
 8000b7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b80:	2003      	movs	r0, #3
 8000b82:	f000 f94f 	bl	8000e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b86:	200f      	movs	r0, #15
 8000b88:	f000 f808 	bl	8000b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b8c:	f7ff fe90 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023c00 	.word	0x40023c00

08000b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba4:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <HAL_InitTick+0x54>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <HAL_InitTick+0x58>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 f967 	bl	8000e8e <HAL_SYSTICK_Config>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00e      	b.n	8000be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b0f      	cmp	r3, #15
 8000bce:	d80a      	bhi.n	8000be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bd8:	f000 f92f 	bl	8000e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bdc:	4a06      	ldr	r2, [pc, #24]	@ (8000bf8 <HAL_InitTick+0x5c>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
 8000be4:	e000      	b.n	8000be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000004 	.word	0x20000004

08000bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <HAL_IncTick+0x20>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <HAL_IncTick+0x24>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4a04      	ldr	r2, [pc, #16]	@ (8000c20 <HAL_IncTick+0x24>)
 8000c0e:	6013      	str	r3, [r2, #0]
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	200000cc 	.word	0x200000cc

08000c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return uwTick;
 8000c28:	4b03      	ldr	r3, [pc, #12]	@ (8000c38 <HAL_GetTick+0x14>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	200000cc 	.word	0x200000cc

08000c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c44:	f7ff ffee 	bl	8000c24 <HAL_GetTick>
 8000c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c54:	d005      	beq.n	8000c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c56:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <HAL_Delay+0x44>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4413      	add	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c62:	bf00      	nop
 8000c64:	f7ff ffde 	bl	8000c24 <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d8f7      	bhi.n	8000c64 <HAL_Delay+0x28>
  {
  }
}
 8000c74:	bf00      	nop
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000008 	.word	0x20000008

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	@ (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db0b      	blt.n	8000d12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 021f 	and.w	r2, r3, #31
 8000d00:	4907      	ldr	r1, [pc, #28]	@ (8000d20 <__NVIC_EnableIRQ+0x38>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	2001      	movs	r0, #1
 8000d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000e100 	.word	0xe000e100

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	@ (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	@ (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	@ 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	@ 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000df0:	d301      	bcc.n	8000df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00f      	b.n	8000e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <SysTick_Config+0x40>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfe:	210f      	movs	r1, #15
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e04:	f7ff ff8e 	bl	8000d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e08:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <SysTick_Config+0x40>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0e:	4b04      	ldr	r3, [pc, #16]	@ (8000e20 <SysTick_Config+0x40>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	e000e010 	.word	0xe000e010

08000e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff29 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4c:	f7ff ff3e 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	68b9      	ldr	r1, [r7, #8]
 8000e56:	6978      	ldr	r0, [r7, #20]
 8000e58:	f7ff ff8e 	bl	8000d78 <NVIC_EncodePriority>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e62:	4611      	mov	r1, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff5d 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff31 	bl	8000ce8 <__NVIC_EnableIRQ>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ffa2 	bl	8000de0 <SysTick_Config>
 8000e9c:	4603      	mov	r3, r0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b089      	sub	sp, #36	@ 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
 8000ec2:	e16b      	b.n	800119c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	697a      	ldr	r2, [r7, #20]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	f040 815a 	bne.w	8001196 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d005      	beq.n	8000efa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d130      	bne.n	8000f5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	2203      	movs	r2, #3
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	68da      	ldr	r2, [r3, #12]
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f30:	2201      	movs	r2, #1
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	091b      	lsrs	r3, r3, #4
 8000f46:	f003 0201 	and.w	r2, r3, #1
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	d017      	beq.n	8000f98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d123      	bne.n	8000fec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	08da      	lsrs	r2, r3, #3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3208      	adds	r2, #8
 8000fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	f003 0307 	and.w	r3, r3, #7
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	220f      	movs	r2, #15
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	691a      	ldr	r2, [r3, #16]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	08da      	lsrs	r2, r3, #3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3208      	adds	r2, #8
 8000fe6:	69b9      	ldr	r1, [r7, #24]
 8000fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0203 	and.w	r2, r3, #3
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 80b4 	beq.w	8001196 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b60      	ldr	r3, [pc, #384]	@ (80011b4 <HAL_GPIO_Init+0x30c>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001036:	4a5f      	ldr	r2, [pc, #380]	@ (80011b4 <HAL_GPIO_Init+0x30c>)
 8001038:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800103c:	6453      	str	r3, [r2, #68]	@ 0x44
 800103e:	4b5d      	ldr	r3, [pc, #372]	@ (80011b4 <HAL_GPIO_Init+0x30c>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001042:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800104a:	4a5b      	ldr	r2, [pc, #364]	@ (80011b8 <HAL_GPIO_Init+0x310>)
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	089b      	lsrs	r3, r3, #2
 8001050:	3302      	adds	r3, #2
 8001052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	220f      	movs	r2, #15
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a52      	ldr	r2, [pc, #328]	@ (80011bc <HAL_GPIO_Init+0x314>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d02b      	beq.n	80010ce <HAL_GPIO_Init+0x226>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a51      	ldr	r2, [pc, #324]	@ (80011c0 <HAL_GPIO_Init+0x318>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d025      	beq.n	80010ca <HAL_GPIO_Init+0x222>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a50      	ldr	r2, [pc, #320]	@ (80011c4 <HAL_GPIO_Init+0x31c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d01f      	beq.n	80010c6 <HAL_GPIO_Init+0x21e>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a4f      	ldr	r2, [pc, #316]	@ (80011c8 <HAL_GPIO_Init+0x320>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d019      	beq.n	80010c2 <HAL_GPIO_Init+0x21a>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a4e      	ldr	r2, [pc, #312]	@ (80011cc <HAL_GPIO_Init+0x324>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d013      	beq.n	80010be <HAL_GPIO_Init+0x216>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4d      	ldr	r2, [pc, #308]	@ (80011d0 <HAL_GPIO_Init+0x328>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d00d      	beq.n	80010ba <HAL_GPIO_Init+0x212>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a4c      	ldr	r2, [pc, #304]	@ (80011d4 <HAL_GPIO_Init+0x32c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d007      	beq.n	80010b6 <HAL_GPIO_Init+0x20e>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4b      	ldr	r2, [pc, #300]	@ (80011d8 <HAL_GPIO_Init+0x330>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d101      	bne.n	80010b2 <HAL_GPIO_Init+0x20a>
 80010ae:	2307      	movs	r3, #7
 80010b0:	e00e      	b.n	80010d0 <HAL_GPIO_Init+0x228>
 80010b2:	2308      	movs	r3, #8
 80010b4:	e00c      	b.n	80010d0 <HAL_GPIO_Init+0x228>
 80010b6:	2306      	movs	r3, #6
 80010b8:	e00a      	b.n	80010d0 <HAL_GPIO_Init+0x228>
 80010ba:	2305      	movs	r3, #5
 80010bc:	e008      	b.n	80010d0 <HAL_GPIO_Init+0x228>
 80010be:	2304      	movs	r3, #4
 80010c0:	e006      	b.n	80010d0 <HAL_GPIO_Init+0x228>
 80010c2:	2303      	movs	r3, #3
 80010c4:	e004      	b.n	80010d0 <HAL_GPIO_Init+0x228>
 80010c6:	2302      	movs	r3, #2
 80010c8:	e002      	b.n	80010d0 <HAL_GPIO_Init+0x228>
 80010ca:	2301      	movs	r3, #1
 80010cc:	e000      	b.n	80010d0 <HAL_GPIO_Init+0x228>
 80010ce:	2300      	movs	r3, #0
 80010d0:	69fa      	ldr	r2, [r7, #28]
 80010d2:	f002 0203 	and.w	r2, r2, #3
 80010d6:	0092      	lsls	r2, r2, #2
 80010d8:	4093      	lsls	r3, r2
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e0:	4935      	ldr	r1, [pc, #212]	@ (80011b8 <HAL_GPIO_Init+0x310>)
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	3302      	adds	r3, #2
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ee:	4b3b      	ldr	r3, [pc, #236]	@ (80011dc <HAL_GPIO_Init+0x334>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001112:	4a32      	ldr	r2, [pc, #200]	@ (80011dc <HAL_GPIO_Init+0x334>)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001118:	4b30      	ldr	r3, [pc, #192]	@ (80011dc <HAL_GPIO_Init+0x334>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800113c:	4a27      	ldr	r2, [pc, #156]	@ (80011dc <HAL_GPIO_Init+0x334>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001142:	4b26      	ldr	r3, [pc, #152]	@ (80011dc <HAL_GPIO_Init+0x334>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001166:	4a1d      	ldr	r2, [pc, #116]	@ (80011dc <HAL_GPIO_Init+0x334>)
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800116c:	4b1b      	ldr	r3, [pc, #108]	@ (80011dc <HAL_GPIO_Init+0x334>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001190:	4a12      	ldr	r2, [pc, #72]	@ (80011dc <HAL_GPIO_Init+0x334>)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3301      	adds	r3, #1
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	2b0f      	cmp	r3, #15
 80011a0:	f67f ae90 	bls.w	8000ec4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3724      	adds	r7, #36	@ 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40013800 	.word	0x40013800
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40020400 	.word	0x40020400
 80011c4:	40020800 	.word	0x40020800
 80011c8:	40020c00 	.word	0x40020c00
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40021400 	.word	0x40021400
 80011d4:	40021800 	.word	0x40021800
 80011d8:	40021c00 	.word	0x40021c00
 80011dc:	40013c00 	.word	0x40013c00

080011e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	807b      	strh	r3, [r7, #2]
 80011ec:	4613      	mov	r3, r2
 80011ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f0:	787b      	ldrb	r3, [r7, #1]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011f6:	887a      	ldrh	r2, [r7, #2]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011fc:	e003      	b.n	8001206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011fe:	887b      	ldrh	r3, [r7, #2]
 8001200:	041a      	lsls	r2, r3, #16
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	619a      	str	r2, [r3, #24]
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001212:	b480      	push	{r7}
 8001214:	b085      	sub	sp, #20
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	460b      	mov	r3, r1
 800121c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001224:	887a      	ldrh	r2, [r7, #2]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4013      	ands	r3, r2
 800122a:	041a      	lsls	r2, r3, #16
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	43d9      	mvns	r1, r3
 8001230:	887b      	ldrh	r3, [r7, #2]
 8001232:	400b      	ands	r3, r1
 8001234:	431a      	orrs	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	619a      	str	r2, [r3, #24]
}
 800123a:	bf00      	nop
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b084      	sub	sp, #16
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e034      	b.n	80012c2 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8001260:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f245 5255 	movw	r2, #21845	@ 0x5555
 800126a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	6852      	ldr	r2, [r2, #4]
 8001274:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	6892      	ldr	r2, [r2, #8]
 800127e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001280:	f7ff fcd0 	bl	8000c24 <HAL_GetTick>
 8001284:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001286:	e00f      	b.n	80012a8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001288:	f7ff fccc 	bl	8000c24 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b31      	cmp	r3, #49	@ 0x31
 8001294:	d908      	bls.n	80012a8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e00c      	b.n	80012c2 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1e8      	bne.n	8001288 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80012be:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80012da:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e267      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	d075      	beq.n	80013f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800130a:	4b88      	ldr	r3, [pc, #544]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	2b04      	cmp	r3, #4
 8001314:	d00c      	beq.n	8001330 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001316:	4b85      	ldr	r3, [pc, #532]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800131e:	2b08      	cmp	r3, #8
 8001320:	d112      	bne.n	8001348 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001322:	4b82      	ldr	r3, [pc, #520]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800132a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800132e:	d10b      	bne.n	8001348 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001330:	4b7e      	ldr	r3, [pc, #504]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d05b      	beq.n	80013f4 <HAL_RCC_OscConfig+0x108>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d157      	bne.n	80013f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e242      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001350:	d106      	bne.n	8001360 <HAL_RCC_OscConfig+0x74>
 8001352:	4b76      	ldr	r3, [pc, #472]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a75      	ldr	r2, [pc, #468]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	e01d      	b.n	800139c <HAL_RCC_OscConfig+0xb0>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001368:	d10c      	bne.n	8001384 <HAL_RCC_OscConfig+0x98>
 800136a:	4b70      	ldr	r3, [pc, #448]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a6f      	ldr	r2, [pc, #444]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001370:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	4b6d      	ldr	r3, [pc, #436]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a6c      	ldr	r2, [pc, #432]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 800137c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	e00b      	b.n	800139c <HAL_RCC_OscConfig+0xb0>
 8001384:	4b69      	ldr	r3, [pc, #420]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a68      	ldr	r2, [pc, #416]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 800138a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b66      	ldr	r3, [pc, #408]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a65      	ldr	r2, [pc, #404]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800139a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d013      	beq.n	80013cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fc3e 	bl	8000c24 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff fc3a 	bl	8000c24 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	@ 0x64
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e207      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013be:	4b5b      	ldr	r3, [pc, #364]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0xc0>
 80013ca:	e014      	b.n	80013f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fc2a 	bl	8000c24 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d4:	f7ff fc26 	bl	8000c24 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b64      	cmp	r3, #100	@ 0x64
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e1f3      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e6:	4b51      	ldr	r3, [pc, #324]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f0      	bne.n	80013d4 <HAL_RCC_OscConfig+0xe8>
 80013f2:	e000      	b.n	80013f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d063      	beq.n	80014ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001402:	4b4a      	ldr	r3, [pc, #296]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00b      	beq.n	8001426 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800140e:	4b47      	ldr	r3, [pc, #284]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001416:	2b08      	cmp	r3, #8
 8001418:	d11c      	bne.n	8001454 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800141a:	4b44      	ldr	r3, [pc, #272]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d116      	bne.n	8001454 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001426:	4b41      	ldr	r3, [pc, #260]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d005      	beq.n	800143e <HAL_RCC_OscConfig+0x152>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d001      	beq.n	800143e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e1c7      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143e:	4b3b      	ldr	r3, [pc, #236]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	4937      	ldr	r1, [pc, #220]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 800144e:	4313      	orrs	r3, r2
 8001450:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001452:	e03a      	b.n	80014ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d020      	beq.n	800149e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800145c:	4b34      	ldr	r3, [pc, #208]	@ (8001530 <HAL_RCC_OscConfig+0x244>)
 800145e:	2201      	movs	r2, #1
 8001460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001462:	f7ff fbdf 	bl	8000c24 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800146a:	f7ff fbdb 	bl	8000c24 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e1a8      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147c:	4b2b      	ldr	r3, [pc, #172]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0f0      	beq.n	800146a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001488:	4b28      	ldr	r3, [pc, #160]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4925      	ldr	r1, [pc, #148]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001498:	4313      	orrs	r3, r2
 800149a:	600b      	str	r3, [r1, #0]
 800149c:	e015      	b.n	80014ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800149e:	4b24      	ldr	r3, [pc, #144]	@ (8001530 <HAL_RCC_OscConfig+0x244>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a4:	f7ff fbbe 	bl	8000c24 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ac:	f7ff fbba 	bl	8000c24 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e187      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014be:	4b1b      	ldr	r3, [pc, #108]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d036      	beq.n	8001544 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d016      	beq.n	800150c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014de:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <HAL_RCC_OscConfig+0x248>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e4:	f7ff fb9e 	bl	8000c24 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ec:	f7ff fb9a 	bl	8000c24 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e167      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fe:	4b0b      	ldr	r3, [pc, #44]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x200>
 800150a:	e01b      	b.n	8001544 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800150c:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <HAL_RCC_OscConfig+0x248>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001512:	f7ff fb87 	bl	8000c24 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001518:	e00e      	b.n	8001538 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800151a:	f7ff fb83 	bl	8000c24 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d907      	bls.n	8001538 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e150      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
 800152c:	40023800 	.word	0x40023800
 8001530:	42470000 	.word	0x42470000
 8001534:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001538:	4b88      	ldr	r3, [pc, #544]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 800153a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1ea      	bne.n	800151a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 8097 	beq.w	8001680 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001556:	4b81      	ldr	r3, [pc, #516]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10f      	bne.n	8001582 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	4b7d      	ldr	r3, [pc, #500]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	4a7c      	ldr	r2, [pc, #496]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 800156c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001570:	6413      	str	r3, [r2, #64]	@ 0x40
 8001572:	4b7a      	ldr	r3, [pc, #488]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800157e:	2301      	movs	r3, #1
 8001580:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001582:	4b77      	ldr	r3, [pc, #476]	@ (8001760 <HAL_RCC_OscConfig+0x474>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800158a:	2b00      	cmp	r3, #0
 800158c:	d118      	bne.n	80015c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800158e:	4b74      	ldr	r3, [pc, #464]	@ (8001760 <HAL_RCC_OscConfig+0x474>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a73      	ldr	r2, [pc, #460]	@ (8001760 <HAL_RCC_OscConfig+0x474>)
 8001594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800159a:	f7ff fb43 	bl	8000c24 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a2:	f7ff fb3f 	bl	8000c24 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e10c      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b4:	4b6a      	ldr	r3, [pc, #424]	@ (8001760 <HAL_RCC_OscConfig+0x474>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d106      	bne.n	80015d6 <HAL_RCC_OscConfig+0x2ea>
 80015c8:	4b64      	ldr	r3, [pc, #400]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 80015ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015cc:	4a63      	ldr	r2, [pc, #396]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015d4:	e01c      	b.n	8001610 <HAL_RCC_OscConfig+0x324>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b05      	cmp	r3, #5
 80015dc:	d10c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x30c>
 80015de:	4b5f      	ldr	r3, [pc, #380]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 80015e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e2:	4a5e      	ldr	r2, [pc, #376]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ea:	4b5c      	ldr	r3, [pc, #368]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 80015ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ee:	4a5b      	ldr	r2, [pc, #364]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015f6:	e00b      	b.n	8001610 <HAL_RCC_OscConfig+0x324>
 80015f8:	4b58      	ldr	r3, [pc, #352]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 80015fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015fc:	4a57      	ldr	r2, [pc, #348]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 80015fe:	f023 0301 	bic.w	r3, r3, #1
 8001602:	6713      	str	r3, [r2, #112]	@ 0x70
 8001604:	4b55      	ldr	r3, [pc, #340]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 8001606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001608:	4a54      	ldr	r2, [pc, #336]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 800160a:	f023 0304 	bic.w	r3, r3, #4
 800160e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d015      	beq.n	8001644 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001618:	f7ff fb04 	bl	8000c24 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161e:	e00a      	b.n	8001636 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001620:	f7ff fb00 	bl	8000c24 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e0cb      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001636:	4b49      	ldr	r3, [pc, #292]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 8001638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0ee      	beq.n	8001620 <HAL_RCC_OscConfig+0x334>
 8001642:	e014      	b.n	800166e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001644:	f7ff faee 	bl	8000c24 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800164a:	e00a      	b.n	8001662 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164c:	f7ff faea 	bl	8000c24 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800165a:	4293      	cmp	r3, r2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e0b5      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001662:	4b3e      	ldr	r3, [pc, #248]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 8001664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1ee      	bne.n	800164c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800166e:	7dfb      	ldrb	r3, [r7, #23]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d105      	bne.n	8001680 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001674:	4b39      	ldr	r3, [pc, #228]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 8001676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001678:	4a38      	ldr	r2, [pc, #224]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 800167a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800167e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 80a1 	beq.w	80017cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800168a:	4b34      	ldr	r3, [pc, #208]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	2b08      	cmp	r3, #8
 8001694:	d05c      	beq.n	8001750 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d141      	bne.n	8001722 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169e:	4b31      	ldr	r3, [pc, #196]	@ (8001764 <HAL_RCC_OscConfig+0x478>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fabe 	bl	8000c24 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ac:	f7ff faba 	bl	8000c24 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e087      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016be:	4b27      	ldr	r3, [pc, #156]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69da      	ldr	r2, [r3, #28]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d8:	019b      	lsls	r3, r3, #6
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e0:	085b      	lsrs	r3, r3, #1
 80016e2:	3b01      	subs	r3, #1
 80016e4:	041b      	lsls	r3, r3, #16
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ec:	061b      	lsls	r3, r3, #24
 80016ee:	491b      	ldr	r1, [pc, #108]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <HAL_RCC_OscConfig+0x478>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fa:	f7ff fa93 	bl	8000c24 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001702:	f7ff fa8f 	bl	8000c24 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e05c      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001714:	4b11      	ldr	r3, [pc, #68]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x416>
 8001720:	e054      	b.n	80017cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <HAL_RCC_OscConfig+0x478>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001728:	f7ff fa7c 	bl	8000c24 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001730:	f7ff fa78 	bl	8000c24 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e045      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x444>
 800174e:	e03d      	b.n	80017cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d107      	bne.n	8001768 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e038      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
 800175c:	40023800 	.word	0x40023800
 8001760:	40007000 	.word	0x40007000
 8001764:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <HAL_RCC_OscConfig+0x4ec>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d028      	beq.n	80017c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d121      	bne.n	80017c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178e:	429a      	cmp	r2, r3
 8001790:	d11a      	bne.n	80017c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001798:	4013      	ands	r3, r2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800179e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d111      	bne.n	80017c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ae:	085b      	lsrs	r3, r3, #1
 80017b0:	3b01      	subs	r3, #1
 80017b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d107      	bne.n	80017c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800

080017dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0cc      	b.n	800198a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017f0:	4b68      	ldr	r3, [pc, #416]	@ (8001994 <HAL_RCC_ClockConfig+0x1b8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d90c      	bls.n	8001818 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fe:	4b65      	ldr	r3, [pc, #404]	@ (8001994 <HAL_RCC_ClockConfig+0x1b8>)
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001806:	4b63      	ldr	r3, [pc, #396]	@ (8001994 <HAL_RCC_ClockConfig+0x1b8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e0b8      	b.n	800198a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d020      	beq.n	8001866 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001830:	4b59      	ldr	r3, [pc, #356]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	4a58      	ldr	r2, [pc, #352]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800183a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001848:	4b53      	ldr	r3, [pc, #332]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	4a52      	ldr	r2, [pc, #328]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001852:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001854:	4b50      	ldr	r3, [pc, #320]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	494d      	ldr	r1, [pc, #308]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	4313      	orrs	r3, r2
 8001864:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d044      	beq.n	80018fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d107      	bne.n	800188a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187a:	4b47      	ldr	r3, [pc, #284]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d119      	bne.n	80018ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e07f      	b.n	800198a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d003      	beq.n	800189a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001896:	2b03      	cmp	r3, #3
 8001898:	d107      	bne.n	80018aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189a:	4b3f      	ldr	r3, [pc, #252]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e06f      	b.n	800198a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e067      	b.n	800198a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ba:	4b37      	ldr	r3, [pc, #220]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f023 0203 	bic.w	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	4934      	ldr	r1, [pc, #208]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018cc:	f7ff f9aa 	bl	8000c24 <HAL_GetTick>
 80018d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d2:	e00a      	b.n	80018ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d4:	f7ff f9a6 	bl	8000c24 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e04f      	b.n	800198a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 020c 	and.w	r2, r3, #12
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d1eb      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018fc:	4b25      	ldr	r3, [pc, #148]	@ (8001994 <HAL_RCC_ClockConfig+0x1b8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d20c      	bcs.n	8001924 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190a:	4b22      	ldr	r3, [pc, #136]	@ (8001994 <HAL_RCC_ClockConfig+0x1b8>)
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001912:	4b20      	ldr	r3, [pc, #128]	@ (8001994 <HAL_RCC_ClockConfig+0x1b8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e032      	b.n	800198a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001930:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	4916      	ldr	r1, [pc, #88]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	4313      	orrs	r3, r2
 8001940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d009      	beq.n	8001962 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800194e:	4b12      	ldr	r3, [pc, #72]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	490e      	ldr	r1, [pc, #56]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	4313      	orrs	r3, r2
 8001960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001962:	f000 f821 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 8001966:	4602      	mov	r2, r0
 8001968:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	091b      	lsrs	r3, r3, #4
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	490a      	ldr	r1, [pc, #40]	@ (800199c <HAL_RCC_ClockConfig+0x1c0>)
 8001974:	5ccb      	ldrb	r3, [r1, r3]
 8001976:	fa22 f303 	lsr.w	r3, r2, r3
 800197a:	4a09      	ldr	r2, [pc, #36]	@ (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 800197c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800197e:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f90a 	bl	8000b9c <HAL_InitTick>

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023c00 	.word	0x40023c00
 8001998:	40023800 	.word	0x40023800
 800199c:	08003078 	.word	0x08003078
 80019a0:	20000000 	.word	0x20000000
 80019a4:	20000004 	.word	0x20000004

080019a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019ac:	b090      	sub	sp, #64	@ 0x40
 80019ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019c0:	4b59      	ldr	r3, [pc, #356]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x180>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 030c 	and.w	r3, r3, #12
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d00d      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0x40>
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	f200 80a1 	bhi.w	8001b14 <HAL_RCC_GetSysClockFreq+0x16c>
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <HAL_RCC_GetSysClockFreq+0x34>
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d003      	beq.n	80019e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80019da:	e09b      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019dc:	4b53      	ldr	r3, [pc, #332]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x184>)
 80019de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019e0:	e09b      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019e2:	4b53      	ldr	r3, [pc, #332]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x188>)
 80019e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019e6:	e098      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x180>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d028      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	099b      	lsrs	r3, r3, #6
 8001a04:	2200      	movs	r2, #0
 8001a06:	623b      	str	r3, [r7, #32]
 8001a08:	627a      	str	r2, [r7, #36]	@ 0x24
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a10:	2100      	movs	r1, #0
 8001a12:	4b47      	ldr	r3, [pc, #284]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a14:	fb03 f201 	mul.w	r2, r3, r1
 8001a18:	2300      	movs	r3, #0
 8001a1a:	fb00 f303 	mul.w	r3, r0, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a43      	ldr	r2, [pc, #268]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a22:	fba0 1202 	umull	r1, r2, r0, r2
 8001a26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a28:	460a      	mov	r2, r1
 8001a2a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001a2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a2e:	4413      	add	r3, r2
 8001a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a34:	2200      	movs	r2, #0
 8001a36:	61bb      	str	r3, [r7, #24]
 8001a38:	61fa      	str	r2, [r7, #28]
 8001a3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001a42:	f7fe fbc1 	bl	80001c8 <__aeabi_uldivmod>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a4e:	e053      	b.n	8001af8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a50:	4b35      	ldr	r3, [pc, #212]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	099b      	lsrs	r3, r3, #6
 8001a56:	2200      	movs	r2, #0
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	617a      	str	r2, [r7, #20]
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a62:	f04f 0b00 	mov.w	fp, #0
 8001a66:	4652      	mov	r2, sl
 8001a68:	465b      	mov	r3, fp
 8001a6a:	f04f 0000 	mov.w	r0, #0
 8001a6e:	f04f 0100 	mov.w	r1, #0
 8001a72:	0159      	lsls	r1, r3, #5
 8001a74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a78:	0150      	lsls	r0, r2, #5
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	ebb2 080a 	subs.w	r8, r2, sl
 8001a82:	eb63 090b 	sbc.w	r9, r3, fp
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a9a:	ebb2 0408 	subs.w	r4, r2, r8
 8001a9e:	eb63 0509 	sbc.w	r5, r3, r9
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	00eb      	lsls	r3, r5, #3
 8001aac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ab0:	00e2      	lsls	r2, r4, #3
 8001ab2:	4614      	mov	r4, r2
 8001ab4:	461d      	mov	r5, r3
 8001ab6:	eb14 030a 	adds.w	r3, r4, sl
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	eb45 030b 	adc.w	r3, r5, fp
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ace:	4629      	mov	r1, r5
 8001ad0:	028b      	lsls	r3, r1, #10
 8001ad2:	4621      	mov	r1, r4
 8001ad4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ad8:	4621      	mov	r1, r4
 8001ada:	028a      	lsls	r2, r1, #10
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	60fa      	str	r2, [r7, #12]
 8001ae8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001aec:	f7fe fb6c 	bl	80001c8 <__aeabi_uldivmod>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4613      	mov	r3, r2
 8001af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001af8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	0c1b      	lsrs	r3, r3, #16
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	3301      	adds	r3, #1
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001b08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b12:	e002      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b14:	4b05      	ldr	r3, [pc, #20]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x184>)
 8001b16:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3740      	adds	r7, #64	@ 0x40
 8001b20:	46bd      	mov	sp, r7
 8001b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	00f42400 	.word	0x00f42400
 8001b30:	017d7840 	.word	0x017d7840

08001b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b38:	4b03      	ldr	r3, [pc, #12]	@ (8001b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20000000 	.word	0x20000000

08001b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b50:	f7ff fff0 	bl	8001b34 <HAL_RCC_GetHCLKFreq>
 8001b54:	4602      	mov	r2, r0
 8001b56:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	0a9b      	lsrs	r3, r3, #10
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	4903      	ldr	r1, [pc, #12]	@ (8001b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b62:	5ccb      	ldrb	r3, [r1, r3]
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	08003088 	.word	0x08003088

08001b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b78:	f7ff ffdc 	bl	8001b34 <HAL_RCC_GetHCLKFreq>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	4b05      	ldr	r3, [pc, #20]	@ (8001b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	0b5b      	lsrs	r3, r3, #13
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	4903      	ldr	r1, [pc, #12]	@ (8001b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b8a:	5ccb      	ldrb	r3, [r1, r3]
 8001b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40023800 	.word	0x40023800
 8001b98:	08003088 	.word	0x08003088

08001b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e041      	b.n	8001c32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d106      	bne.n	8001bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7fe fe9c 	bl	8000900 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4610      	mov	r0, r2
 8001bdc:	f000 fc2a 	bl	8002434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e041      	b.n	8001cd0 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d106      	bne.n	8001c66 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f839 	bl	8001cd8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2202      	movs	r2, #2
 8001c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3304      	adds	r3, #4
 8001c76:	4619      	mov	r1, r3
 8001c78:	4610      	mov	r0, r2
 8001c7a:	f000 fbdb 	bl	8002434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d104      	bne.n	8001d0a <HAL_TIM_IC_Start_IT+0x1e>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	e013      	b.n	8001d32 <HAL_TIM_IC_Start_IT+0x46>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d104      	bne.n	8001d1a <HAL_TIM_IC_Start_IT+0x2e>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	e00b      	b.n	8001d32 <HAL_TIM_IC_Start_IT+0x46>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d104      	bne.n	8001d2a <HAL_TIM_IC_Start_IT+0x3e>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	e003      	b.n	8001d32 <HAL_TIM_IC_Start_IT+0x46>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d104      	bne.n	8001d44 <HAL_TIM_IC_Start_IT+0x58>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	e013      	b.n	8001d6c <HAL_TIM_IC_Start_IT+0x80>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d104      	bne.n	8001d54 <HAL_TIM_IC_Start_IT+0x68>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	e00b      	b.n	8001d6c <HAL_TIM_IC_Start_IT+0x80>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d104      	bne.n	8001d64 <HAL_TIM_IC_Start_IT+0x78>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	e003      	b.n	8001d6c <HAL_TIM_IC_Start_IT+0x80>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001d6e:	7bbb      	ldrb	r3, [r7, #14]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d102      	bne.n	8001d7a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001d74:	7b7b      	ldrb	r3, [r7, #13]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d001      	beq.n	8001d7e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e0cc      	b.n	8001f18 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d104      	bne.n	8001d8e <HAL_TIM_IC_Start_IT+0xa2>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d8c:	e013      	b.n	8001db6 <HAL_TIM_IC_Start_IT+0xca>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d104      	bne.n	8001d9e <HAL_TIM_IC_Start_IT+0xb2>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2202      	movs	r2, #2
 8001d98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d9c:	e00b      	b.n	8001db6 <HAL_TIM_IC_Start_IT+0xca>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d104      	bne.n	8001dae <HAL_TIM_IC_Start_IT+0xc2>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2202      	movs	r2, #2
 8001da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dac:	e003      	b.n	8001db6 <HAL_TIM_IC_Start_IT+0xca>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2202      	movs	r2, #2
 8001db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d104      	bne.n	8001dc6 <HAL_TIM_IC_Start_IT+0xda>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dc4:	e013      	b.n	8001dee <HAL_TIM_IC_Start_IT+0x102>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d104      	bne.n	8001dd6 <HAL_TIM_IC_Start_IT+0xea>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001dd4:	e00b      	b.n	8001dee <HAL_TIM_IC_Start_IT+0x102>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d104      	bne.n	8001de6 <HAL_TIM_IC_Start_IT+0xfa>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2202      	movs	r2, #2
 8001de0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001de4:	e003      	b.n	8001dee <HAL_TIM_IC_Start_IT+0x102>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2202      	movs	r2, #2
 8001dea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	2b0c      	cmp	r3, #12
 8001df2:	d841      	bhi.n	8001e78 <HAL_TIM_IC_Start_IT+0x18c>
 8001df4:	a201      	add	r2, pc, #4	@ (adr r2, 8001dfc <HAL_TIM_IC_Start_IT+0x110>)
 8001df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfa:	bf00      	nop
 8001dfc:	08001e31 	.word	0x08001e31
 8001e00:	08001e79 	.word	0x08001e79
 8001e04:	08001e79 	.word	0x08001e79
 8001e08:	08001e79 	.word	0x08001e79
 8001e0c:	08001e43 	.word	0x08001e43
 8001e10:	08001e79 	.word	0x08001e79
 8001e14:	08001e79 	.word	0x08001e79
 8001e18:	08001e79 	.word	0x08001e79
 8001e1c:	08001e55 	.word	0x08001e55
 8001e20:	08001e79 	.word	0x08001e79
 8001e24:	08001e79 	.word	0x08001e79
 8001e28:	08001e79 	.word	0x08001e79
 8001e2c:	08001e67 	.word	0x08001e67
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0202 	orr.w	r2, r2, #2
 8001e3e:	60da      	str	r2, [r3, #12]
      break;
 8001e40:	e01d      	b.n	8001e7e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0204 	orr.w	r2, r2, #4
 8001e50:	60da      	str	r2, [r3, #12]
      break;
 8001e52:	e014      	b.n	8001e7e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0208 	orr.w	r2, r2, #8
 8001e62:	60da      	str	r2, [r3, #12]
      break;
 8001e64:	e00b      	b.n	8001e7e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 0210 	orr.w	r2, r2, #16
 8001e74:	60da      	str	r2, [r3, #12]
      break;
 8001e76:	e002      	b.n	8001e7e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e7c:	bf00      	nop
  }

  if (status == HAL_OK)
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d148      	bne.n	8001f16 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	6839      	ldr	r1, [r7, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 fd41 	bl	8002914 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a22      	ldr	r2, [pc, #136]	@ (8001f20 <HAL_TIM_IC_Start_IT+0x234>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d022      	beq.n	8001ee2 <HAL_TIM_IC_Start_IT+0x1f6>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ea4:	d01d      	beq.n	8001ee2 <HAL_TIM_IC_Start_IT+0x1f6>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8001f24 <HAL_TIM_IC_Start_IT+0x238>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d018      	beq.n	8001ee2 <HAL_TIM_IC_Start_IT+0x1f6>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8001f28 <HAL_TIM_IC_Start_IT+0x23c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d013      	beq.n	8001ee2 <HAL_TIM_IC_Start_IT+0x1f6>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8001f2c <HAL_TIM_IC_Start_IT+0x240>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00e      	beq.n	8001ee2 <HAL_TIM_IC_Start_IT+0x1f6>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a19      	ldr	r2, [pc, #100]	@ (8001f30 <HAL_TIM_IC_Start_IT+0x244>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d009      	beq.n	8001ee2 <HAL_TIM_IC_Start_IT+0x1f6>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a18      	ldr	r2, [pc, #96]	@ (8001f34 <HAL_TIM_IC_Start_IT+0x248>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d004      	beq.n	8001ee2 <HAL_TIM_IC_Start_IT+0x1f6>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a16      	ldr	r2, [pc, #88]	@ (8001f38 <HAL_TIM_IC_Start_IT+0x24c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d111      	bne.n	8001f06 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2b06      	cmp	r3, #6
 8001ef2:	d010      	beq.n	8001f16 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f04:	e007      	b.n	8001f16 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0201 	orr.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40010000 	.word	0x40010000
 8001f24:	40000400 	.word	0x40000400
 8001f28:	40000800 	.word	0x40000800
 8001f2c:	40000c00 	.word	0x40000c00
 8001f30:	40010400 	.word	0x40010400
 8001f34:	40014000 	.word	0x40014000
 8001f38:	40001800 	.word	0x40001800

08001f3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d020      	beq.n	8001fa0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d01b      	beq.n	8001fa0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0202 	mvn.w	r2, #2
 8001f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7fe fc78 	bl	800087c <HAL_TIM_IC_CaptureCallback>
 8001f8c:	e005      	b.n	8001f9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fa31 	bl	80023f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 fa38 	bl	800240a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d020      	beq.n	8001fec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d01b      	beq.n	8001fec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0204 	mvn.w	r2, #4
 8001fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7fe fc52 	bl	800087c <HAL_TIM_IC_CaptureCallback>
 8001fd8:	e005      	b.n	8001fe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fa0b 	bl	80023f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 fa12 	bl	800240a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d020      	beq.n	8002038 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d01b      	beq.n	8002038 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0208 	mvn.w	r2, #8
 8002008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2204      	movs	r2, #4
 800200e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7fe fc2c 	bl	800087c <HAL_TIM_IC_CaptureCallback>
 8002024:	e005      	b.n	8002032 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f9e5 	bl	80023f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f9ec 	bl	800240a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b00      	cmp	r3, #0
 8002040:	d020      	beq.n	8002084 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	2b00      	cmp	r3, #0
 800204a:	d01b      	beq.n	8002084 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0210 	mvn.w	r2, #16
 8002054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2208      	movs	r2, #8
 800205a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7fe fc06 	bl	800087c <HAL_TIM_IC_CaptureCallback>
 8002070:	e005      	b.n	800207e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f9bf 	bl	80023f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f9c6 	bl	800240a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00c      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0201 	mvn.w	r2, #1
 80020a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f99d 	bl	80023e2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00c      	beq.n	80020cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80020c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 fcd0 	bl	8002a6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00c      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d007      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f997 	bl	800241e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	f003 0320 	and.w	r3, r3, #32
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00c      	beq.n	8002114 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f003 0320 	and.w	r3, r3, #32
 8002100:	2b00      	cmp	r3, #0
 8002102:	d007      	beq.n	8002114 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0220 	mvn.w	r2, #32
 800210c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 fca2 	bl	8002a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002114:	bf00      	nop
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_TIM_IC_ConfigChannel+0x1e>
 8002136:	2302      	movs	r3, #2
 8002138:	e088      	b.n	800224c <HAL_TIM_IC_ConfigChannel+0x130>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d11b      	bne.n	8002180 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002158:	f000 fa18 	bl	800258c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699a      	ldr	r2, [r3, #24]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 020c 	bic.w	r2, r2, #12
 800216a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6999      	ldr	r1, [r3, #24]
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	619a      	str	r2, [r3, #24]
 800217e:	e060      	b.n	8002242 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b04      	cmp	r3, #4
 8002184:	d11c      	bne.n	80021c0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002196:	f000 fa9c 	bl	80026d2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699a      	ldr	r2, [r3, #24]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80021a8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6999      	ldr	r1, [r3, #24]
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	021a      	lsls	r2, r3, #8
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	619a      	str	r2, [r3, #24]
 80021be:	e040      	b.n	8002242 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d11b      	bne.n	80021fe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80021d6:	f000 fae9 	bl	80027ac <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	69da      	ldr	r2, [r3, #28]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 020c 	bic.w	r2, r2, #12
 80021e8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69d9      	ldr	r1, [r3, #28]
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	61da      	str	r2, [r3, #28]
 80021fc:	e021      	b.n	8002242 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b0c      	cmp	r3, #12
 8002202:	d11c      	bne.n	800223e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002214:	f000 fb06 	bl	8002824 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	69da      	ldr	r2, [r3, #28]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002226:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	69d9      	ldr	r1, [r3, #28]
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	021a      	lsls	r2, r3, #8
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	61da      	str	r2, [r3, #28]
 800223c:	e001      	b.n	8002242 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800224a:	7dfb      	ldrb	r3, [r7, #23]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_TIM_ConfigClockSource+0x1c>
 800226c:	2302      	movs	r3, #2
 800226e:	e0b4      	b.n	80023da <HAL_TIM_ConfigClockSource+0x186>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800228e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002296:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022a8:	d03e      	beq.n	8002328 <HAL_TIM_ConfigClockSource+0xd4>
 80022aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022ae:	f200 8087 	bhi.w	80023c0 <HAL_TIM_ConfigClockSource+0x16c>
 80022b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022b6:	f000 8086 	beq.w	80023c6 <HAL_TIM_ConfigClockSource+0x172>
 80022ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022be:	d87f      	bhi.n	80023c0 <HAL_TIM_ConfigClockSource+0x16c>
 80022c0:	2b70      	cmp	r3, #112	@ 0x70
 80022c2:	d01a      	beq.n	80022fa <HAL_TIM_ConfigClockSource+0xa6>
 80022c4:	2b70      	cmp	r3, #112	@ 0x70
 80022c6:	d87b      	bhi.n	80023c0 <HAL_TIM_ConfigClockSource+0x16c>
 80022c8:	2b60      	cmp	r3, #96	@ 0x60
 80022ca:	d050      	beq.n	800236e <HAL_TIM_ConfigClockSource+0x11a>
 80022cc:	2b60      	cmp	r3, #96	@ 0x60
 80022ce:	d877      	bhi.n	80023c0 <HAL_TIM_ConfigClockSource+0x16c>
 80022d0:	2b50      	cmp	r3, #80	@ 0x50
 80022d2:	d03c      	beq.n	800234e <HAL_TIM_ConfigClockSource+0xfa>
 80022d4:	2b50      	cmp	r3, #80	@ 0x50
 80022d6:	d873      	bhi.n	80023c0 <HAL_TIM_ConfigClockSource+0x16c>
 80022d8:	2b40      	cmp	r3, #64	@ 0x40
 80022da:	d058      	beq.n	800238e <HAL_TIM_ConfigClockSource+0x13a>
 80022dc:	2b40      	cmp	r3, #64	@ 0x40
 80022de:	d86f      	bhi.n	80023c0 <HAL_TIM_ConfigClockSource+0x16c>
 80022e0:	2b30      	cmp	r3, #48	@ 0x30
 80022e2:	d064      	beq.n	80023ae <HAL_TIM_ConfigClockSource+0x15a>
 80022e4:	2b30      	cmp	r3, #48	@ 0x30
 80022e6:	d86b      	bhi.n	80023c0 <HAL_TIM_ConfigClockSource+0x16c>
 80022e8:	2b20      	cmp	r3, #32
 80022ea:	d060      	beq.n	80023ae <HAL_TIM_ConfigClockSource+0x15a>
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	d867      	bhi.n	80023c0 <HAL_TIM_ConfigClockSource+0x16c>
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d05c      	beq.n	80023ae <HAL_TIM_ConfigClockSource+0x15a>
 80022f4:	2b10      	cmp	r3, #16
 80022f6:	d05a      	beq.n	80023ae <HAL_TIM_ConfigClockSource+0x15a>
 80022f8:	e062      	b.n	80023c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800230a:	f000 fae3 	bl	80028d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800231c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	609a      	str	r2, [r3, #8]
      break;
 8002326:	e04f      	b.n	80023c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002338:	f000 facc 	bl	80028d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800234a:	609a      	str	r2, [r3, #8]
      break;
 800234c:	e03c      	b.n	80023c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800235a:	461a      	mov	r2, r3
 800235c:	f000 f98a 	bl	8002674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2150      	movs	r1, #80	@ 0x50
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fa99 	bl	800289e <TIM_ITRx_SetConfig>
      break;
 800236c:	e02c      	b.n	80023c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800237a:	461a      	mov	r2, r3
 800237c:	f000 f9e6 	bl	800274c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2160      	movs	r1, #96	@ 0x60
 8002386:	4618      	mov	r0, r3
 8002388:	f000 fa89 	bl	800289e <TIM_ITRx_SetConfig>
      break;
 800238c:	e01c      	b.n	80023c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800239a:	461a      	mov	r2, r3
 800239c:	f000 f96a 	bl	8002674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2140      	movs	r1, #64	@ 0x40
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 fa79 	bl	800289e <TIM_ITRx_SetConfig>
      break;
 80023ac:	e00c      	b.n	80023c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4619      	mov	r1, r3
 80023b8:	4610      	mov	r0, r2
 80023ba:	f000 fa70 	bl	800289e <TIM_ITRx_SetConfig>
      break;
 80023be:	e003      	b.n	80023c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
      break;
 80023c4:	e000      	b.n	80023c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a46      	ldr	r2, [pc, #280]	@ (8002560 <TIM_Base_SetConfig+0x12c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d013      	beq.n	8002474 <TIM_Base_SetConfig+0x40>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002452:	d00f      	beq.n	8002474 <TIM_Base_SetConfig+0x40>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a43      	ldr	r2, [pc, #268]	@ (8002564 <TIM_Base_SetConfig+0x130>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d00b      	beq.n	8002474 <TIM_Base_SetConfig+0x40>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a42      	ldr	r2, [pc, #264]	@ (8002568 <TIM_Base_SetConfig+0x134>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d007      	beq.n	8002474 <TIM_Base_SetConfig+0x40>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a41      	ldr	r2, [pc, #260]	@ (800256c <TIM_Base_SetConfig+0x138>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d003      	beq.n	8002474 <TIM_Base_SetConfig+0x40>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a40      	ldr	r2, [pc, #256]	@ (8002570 <TIM_Base_SetConfig+0x13c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d108      	bne.n	8002486 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800247a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	4313      	orrs	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a35      	ldr	r2, [pc, #212]	@ (8002560 <TIM_Base_SetConfig+0x12c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d02b      	beq.n	80024e6 <TIM_Base_SetConfig+0xb2>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002494:	d027      	beq.n	80024e6 <TIM_Base_SetConfig+0xb2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a32      	ldr	r2, [pc, #200]	@ (8002564 <TIM_Base_SetConfig+0x130>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d023      	beq.n	80024e6 <TIM_Base_SetConfig+0xb2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a31      	ldr	r2, [pc, #196]	@ (8002568 <TIM_Base_SetConfig+0x134>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d01f      	beq.n	80024e6 <TIM_Base_SetConfig+0xb2>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a30      	ldr	r2, [pc, #192]	@ (800256c <TIM_Base_SetConfig+0x138>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d01b      	beq.n	80024e6 <TIM_Base_SetConfig+0xb2>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a2f      	ldr	r2, [pc, #188]	@ (8002570 <TIM_Base_SetConfig+0x13c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d017      	beq.n	80024e6 <TIM_Base_SetConfig+0xb2>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a2e      	ldr	r2, [pc, #184]	@ (8002574 <TIM_Base_SetConfig+0x140>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d013      	beq.n	80024e6 <TIM_Base_SetConfig+0xb2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a2d      	ldr	r2, [pc, #180]	@ (8002578 <TIM_Base_SetConfig+0x144>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d00f      	beq.n	80024e6 <TIM_Base_SetConfig+0xb2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a2c      	ldr	r2, [pc, #176]	@ (800257c <TIM_Base_SetConfig+0x148>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d00b      	beq.n	80024e6 <TIM_Base_SetConfig+0xb2>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002580 <TIM_Base_SetConfig+0x14c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d007      	beq.n	80024e6 <TIM_Base_SetConfig+0xb2>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002584 <TIM_Base_SetConfig+0x150>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d003      	beq.n	80024e6 <TIM_Base_SetConfig+0xb2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a29      	ldr	r2, [pc, #164]	@ (8002588 <TIM_Base_SetConfig+0x154>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d108      	bne.n	80024f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	4313      	orrs	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a10      	ldr	r2, [pc, #64]	@ (8002560 <TIM_Base_SetConfig+0x12c>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d003      	beq.n	800252c <TIM_Base_SetConfig+0xf8>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a12      	ldr	r2, [pc, #72]	@ (8002570 <TIM_Base_SetConfig+0x13c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d103      	bne.n	8002534 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b01      	cmp	r3, #1
 8002544:	d105      	bne.n	8002552 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f023 0201 	bic.w	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	611a      	str	r2, [r3, #16]
  }
}
 8002552:	bf00      	nop
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40010000 	.word	0x40010000
 8002564:	40000400 	.word	0x40000400
 8002568:	40000800 	.word	0x40000800
 800256c:	40000c00 	.word	0x40000c00
 8002570:	40010400 	.word	0x40010400
 8002574:	40014000 	.word	0x40014000
 8002578:	40014400 	.word	0x40014400
 800257c:	40014800 	.word	0x40014800
 8002580:	40001800 	.word	0x40001800
 8002584:	40001c00 	.word	0x40001c00
 8002588:	40002000 	.word	0x40002000

0800258c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	f023 0201 	bic.w	r2, r3, #1
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4a28      	ldr	r2, [pc, #160]	@ (8002658 <TIM_TI1_SetConfig+0xcc>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d01b      	beq.n	80025f2 <TIM_TI1_SetConfig+0x66>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025c0:	d017      	beq.n	80025f2 <TIM_TI1_SetConfig+0x66>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4a25      	ldr	r2, [pc, #148]	@ (800265c <TIM_TI1_SetConfig+0xd0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <TIM_TI1_SetConfig+0x66>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4a24      	ldr	r2, [pc, #144]	@ (8002660 <TIM_TI1_SetConfig+0xd4>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00f      	beq.n	80025f2 <TIM_TI1_SetConfig+0x66>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4a23      	ldr	r2, [pc, #140]	@ (8002664 <TIM_TI1_SetConfig+0xd8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00b      	beq.n	80025f2 <TIM_TI1_SetConfig+0x66>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4a22      	ldr	r2, [pc, #136]	@ (8002668 <TIM_TI1_SetConfig+0xdc>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d007      	beq.n	80025f2 <TIM_TI1_SetConfig+0x66>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4a21      	ldr	r2, [pc, #132]	@ (800266c <TIM_TI1_SetConfig+0xe0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d003      	beq.n	80025f2 <TIM_TI1_SetConfig+0x66>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4a20      	ldr	r2, [pc, #128]	@ (8002670 <TIM_TI1_SetConfig+0xe4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d101      	bne.n	80025f6 <TIM_TI1_SetConfig+0x6a>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <TIM_TI1_SetConfig+0x6c>
 80025f6:	2300      	movs	r3, #0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f023 0303 	bic.w	r3, r3, #3
 8002602:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4313      	orrs	r3, r2
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	e003      	b.n	8002616 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800261c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	b2db      	uxtb	r3, r3
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	4313      	orrs	r3, r2
 8002628:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	f023 030a 	bic.w	r3, r3, #10
 8002630:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	f003 030a 	and.w	r3, r3, #10
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	621a      	str	r2, [r3, #32]
}
 800264a:	bf00      	nop
 800264c:	371c      	adds	r7, #28
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40010000 	.word	0x40010000
 800265c:	40000400 	.word	0x40000400
 8002660:	40000800 	.word	0x40000800
 8002664:	40000c00 	.word	0x40000c00
 8002668:	40010400 	.word	0x40010400
 800266c:	40014000 	.word	0x40014000
 8002670:	40001800 	.word	0x40001800

08002674 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	f023 0201 	bic.w	r2, r3, #1
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800269e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f023 030a 	bic.w	r3, r3, #10
 80026b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	621a      	str	r2, [r3, #32]
}
 80026c6:	bf00      	nop
 80026c8:	371c      	adds	r7, #28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b087      	sub	sp, #28
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
 80026de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	f023 0210 	bic.w	r2, r3, #16
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	021b      	lsls	r3, r3, #8
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002710:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	031b      	lsls	r3, r3, #12
 8002716:	b29b      	uxth	r3, r3
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002724:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	4313      	orrs	r3, r2
 8002732:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	621a      	str	r2, [r3, #32]
}
 8002740:	bf00      	nop
 8002742:	371c      	adds	r7, #28
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800274c:	b480      	push	{r7}
 800274e:	b087      	sub	sp, #28
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	f023 0210 	bic.w	r2, r3, #16
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	031b      	lsls	r3, r3, #12
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002788:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	621a      	str	r2, [r3, #32]
}
 80027a0:	bf00      	nop
 80027a2:	371c      	adds	r7, #28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	f023 0303 	bic.w	r3, r3, #3
 80027d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80027fc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	021b      	lsls	r3, r3, #8
 8002802:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4313      	orrs	r3, r2
 800280a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	621a      	str	r2, [r3, #32]
}
 8002818:	bf00      	nop
 800281a:	371c      	adds	r7, #28
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002824:	b480      	push	{r7}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002850:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	021b      	lsls	r3, r3, #8
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002862:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	031b      	lsls	r3, r3, #12
 8002868:	b29b      	uxth	r3, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8002876:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	031b      	lsls	r3, r3, #12
 800287c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	4313      	orrs	r3, r2
 8002884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	621a      	str	r2, [r3, #32]
}
 8002892:	bf00      	nop
 8002894:	371c      	adds	r7, #28
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800289e:	b480      	push	{r7}
 80028a0:	b085      	sub	sp, #20
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f043 0307 	orr.w	r3, r3, #7
 80028c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	609a      	str	r2, [r3, #8]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80028ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	021a      	lsls	r2, r3, #8
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	4313      	orrs	r3, r2
 8002900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	609a      	str	r2, [r3, #8]
}
 8002908:	bf00      	nop
 800290a:	371c      	adds	r7, #28
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	f003 031f 	and.w	r3, r3, #31
 8002926:	2201      	movs	r2, #1
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a1a      	ldr	r2, [r3, #32]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	43db      	mvns	r3, r3
 8002936:	401a      	ands	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a1a      	ldr	r2, [r3, #32]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	fa01 f303 	lsl.w	r3, r1, r3
 800294c:	431a      	orrs	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	621a      	str	r2, [r3, #32]
}
 8002952:	bf00      	nop
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
	...

08002960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002974:	2302      	movs	r3, #2
 8002976:	e05a      	b.n	8002a2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800299e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a21      	ldr	r2, [pc, #132]	@ (8002a3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d022      	beq.n	8002a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029c4:	d01d      	beq.n	8002a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002a40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d018      	beq.n	8002a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d013      	beq.n	8002a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a1a      	ldr	r2, [pc, #104]	@ (8002a48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d00e      	beq.n	8002a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a18      	ldr	r2, [pc, #96]	@ (8002a4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d009      	beq.n	8002a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a17      	ldr	r2, [pc, #92]	@ (8002a50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d004      	beq.n	8002a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a15      	ldr	r2, [pc, #84]	@ (8002a54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d10c      	bne.n	8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40010000 	.word	0x40010000
 8002a40:	40000400 	.word	0x40000400
 8002a44:	40000800 	.word	0x40000800
 8002a48:	40000c00 	.word	0x40000c00
 8002a4c:	40010400 	.word	0x40010400
 8002a50:	40014000 	.word	0x40014000
 8002a54:	40001800 	.word	0x40001800

08002a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e042      	b.n	8002b18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d106      	bne.n	8002aac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fd ff78 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2224      	movs	r2, #36	@ 0x24
 8002ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ac2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f82b 	bl	8002b20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ad8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695a      	ldr	r2, [r3, #20]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ae8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002af8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b24:	b0c0      	sub	sp, #256	@ 0x100
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b3c:	68d9      	ldr	r1, [r3, #12]
 8002b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	ea40 0301 	orr.w	r3, r0, r1
 8002b48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002b78:	f021 010c 	bic.w	r1, r1, #12
 8002b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b86:	430b      	orrs	r3, r1
 8002b88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b9a:	6999      	ldr	r1, [r3, #24]
 8002b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	ea40 0301 	orr.w	r3, r0, r1
 8002ba6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	4b8f      	ldr	r3, [pc, #572]	@ (8002dec <UART_SetConfig+0x2cc>)
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d005      	beq.n	8002bc0 <UART_SetConfig+0xa0>
 8002bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	4b8d      	ldr	r3, [pc, #564]	@ (8002df0 <UART_SetConfig+0x2d0>)
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d104      	bne.n	8002bca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bc0:	f7fe ffd8 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 8002bc4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002bc8:	e003      	b.n	8002bd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bca:	f7fe ffbf 	bl	8001b4c <HAL_RCC_GetPCLK1Freq>
 8002bce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bdc:	f040 810c 	bne.w	8002df8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002be4:	2200      	movs	r2, #0
 8002be6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002bea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002bee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002bf2:	4622      	mov	r2, r4
 8002bf4:	462b      	mov	r3, r5
 8002bf6:	1891      	adds	r1, r2, r2
 8002bf8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002bfa:	415b      	adcs	r3, r3
 8002bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c02:	4621      	mov	r1, r4
 8002c04:	eb12 0801 	adds.w	r8, r2, r1
 8002c08:	4629      	mov	r1, r5
 8002c0a:	eb43 0901 	adc.w	r9, r3, r1
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c22:	4690      	mov	r8, r2
 8002c24:	4699      	mov	r9, r3
 8002c26:	4623      	mov	r3, r4
 8002c28:	eb18 0303 	adds.w	r3, r8, r3
 8002c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c30:	462b      	mov	r3, r5
 8002c32:	eb49 0303 	adc.w	r3, r9, r3
 8002c36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002c4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c4e:	460b      	mov	r3, r1
 8002c50:	18db      	adds	r3, r3, r3
 8002c52:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c54:	4613      	mov	r3, r2
 8002c56:	eb42 0303 	adc.w	r3, r2, r3
 8002c5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002c60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002c64:	f7fd fab0 	bl	80001c8 <__aeabi_uldivmod>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4b61      	ldr	r3, [pc, #388]	@ (8002df4 <UART_SetConfig+0x2d4>)
 8002c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	011c      	lsls	r4, r3, #4
 8002c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002c84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002c88:	4642      	mov	r2, r8
 8002c8a:	464b      	mov	r3, r9
 8002c8c:	1891      	adds	r1, r2, r2
 8002c8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c90:	415b      	adcs	r3, r3
 8002c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c98:	4641      	mov	r1, r8
 8002c9a:	eb12 0a01 	adds.w	sl, r2, r1
 8002c9e:	4649      	mov	r1, r9
 8002ca0:	eb43 0b01 	adc.w	fp, r3, r1
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	f04f 0300 	mov.w	r3, #0
 8002cac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cb8:	4692      	mov	sl, r2
 8002cba:	469b      	mov	fp, r3
 8002cbc:	4643      	mov	r3, r8
 8002cbe:	eb1a 0303 	adds.w	r3, sl, r3
 8002cc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002cc6:	464b      	mov	r3, r9
 8002cc8:	eb4b 0303 	adc.w	r3, fp, r3
 8002ccc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002cdc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002ce0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	18db      	adds	r3, r3, r3
 8002ce8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cea:	4613      	mov	r3, r2
 8002cec:	eb42 0303 	adc.w	r3, r2, r3
 8002cf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cf2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002cf6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002cfa:	f7fd fa65 	bl	80001c8 <__aeabi_uldivmod>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4611      	mov	r1, r2
 8002d04:	4b3b      	ldr	r3, [pc, #236]	@ (8002df4 <UART_SetConfig+0x2d4>)
 8002d06:	fba3 2301 	umull	r2, r3, r3, r1
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	2264      	movs	r2, #100	@ 0x64
 8002d0e:	fb02 f303 	mul.w	r3, r2, r3
 8002d12:	1acb      	subs	r3, r1, r3
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002d1a:	4b36      	ldr	r3, [pc, #216]	@ (8002df4 <UART_SetConfig+0x2d4>)
 8002d1c:	fba3 2302 	umull	r2, r3, r3, r2
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002d28:	441c      	add	r4, r3
 8002d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002d38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002d3c:	4642      	mov	r2, r8
 8002d3e:	464b      	mov	r3, r9
 8002d40:	1891      	adds	r1, r2, r2
 8002d42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d44:	415b      	adcs	r3, r3
 8002d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002d4c:	4641      	mov	r1, r8
 8002d4e:	1851      	adds	r1, r2, r1
 8002d50:	6339      	str	r1, [r7, #48]	@ 0x30
 8002d52:	4649      	mov	r1, r9
 8002d54:	414b      	adcs	r3, r1
 8002d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002d64:	4659      	mov	r1, fp
 8002d66:	00cb      	lsls	r3, r1, #3
 8002d68:	4651      	mov	r1, sl
 8002d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d6e:	4651      	mov	r1, sl
 8002d70:	00ca      	lsls	r2, r1, #3
 8002d72:	4610      	mov	r0, r2
 8002d74:	4619      	mov	r1, r3
 8002d76:	4603      	mov	r3, r0
 8002d78:	4642      	mov	r2, r8
 8002d7a:	189b      	adds	r3, r3, r2
 8002d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d80:	464b      	mov	r3, r9
 8002d82:	460a      	mov	r2, r1
 8002d84:	eb42 0303 	adc.w	r3, r2, r3
 8002d88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002d9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002da0:	460b      	mov	r3, r1
 8002da2:	18db      	adds	r3, r3, r3
 8002da4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002da6:	4613      	mov	r3, r2
 8002da8:	eb42 0303 	adc.w	r3, r2, r3
 8002dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002db2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002db6:	f7fd fa07 	bl	80001c8 <__aeabi_uldivmod>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002df4 <UART_SetConfig+0x2d4>)
 8002dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002dc4:	095b      	lsrs	r3, r3, #5
 8002dc6:	2164      	movs	r1, #100	@ 0x64
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	3332      	adds	r3, #50	@ 0x32
 8002dd2:	4a08      	ldr	r2, [pc, #32]	@ (8002df4 <UART_SetConfig+0x2d4>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	f003 0207 	and.w	r2, r3, #7
 8002dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4422      	add	r2, r4
 8002de6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002de8:	e106      	b.n	8002ff8 <UART_SetConfig+0x4d8>
 8002dea:	bf00      	nop
 8002dec:	40011000 	.word	0x40011000
 8002df0:	40011400 	.word	0x40011400
 8002df4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002e02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002e06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002e0a:	4642      	mov	r2, r8
 8002e0c:	464b      	mov	r3, r9
 8002e0e:	1891      	adds	r1, r2, r2
 8002e10:	6239      	str	r1, [r7, #32]
 8002e12:	415b      	adcs	r3, r3
 8002e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e1a:	4641      	mov	r1, r8
 8002e1c:	1854      	adds	r4, r2, r1
 8002e1e:	4649      	mov	r1, r9
 8002e20:	eb43 0501 	adc.w	r5, r3, r1
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	00eb      	lsls	r3, r5, #3
 8002e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e32:	00e2      	lsls	r2, r4, #3
 8002e34:	4614      	mov	r4, r2
 8002e36:	461d      	mov	r5, r3
 8002e38:	4643      	mov	r3, r8
 8002e3a:	18e3      	adds	r3, r4, r3
 8002e3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e40:	464b      	mov	r3, r9
 8002e42:	eb45 0303 	adc.w	r3, r5, r3
 8002e46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e66:	4629      	mov	r1, r5
 8002e68:	008b      	lsls	r3, r1, #2
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e70:	4621      	mov	r1, r4
 8002e72:	008a      	lsls	r2, r1, #2
 8002e74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002e78:	f7fd f9a6 	bl	80001c8 <__aeabi_uldivmod>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4b60      	ldr	r3, [pc, #384]	@ (8003004 <UART_SetConfig+0x4e4>)
 8002e82:	fba3 2302 	umull	r2, r3, r3, r2
 8002e86:	095b      	lsrs	r3, r3, #5
 8002e88:	011c      	lsls	r4, r3, #4
 8002e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002e9c:	4642      	mov	r2, r8
 8002e9e:	464b      	mov	r3, r9
 8002ea0:	1891      	adds	r1, r2, r2
 8002ea2:	61b9      	str	r1, [r7, #24]
 8002ea4:	415b      	adcs	r3, r3
 8002ea6:	61fb      	str	r3, [r7, #28]
 8002ea8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eac:	4641      	mov	r1, r8
 8002eae:	1851      	adds	r1, r2, r1
 8002eb0:	6139      	str	r1, [r7, #16]
 8002eb2:	4649      	mov	r1, r9
 8002eb4:	414b      	adcs	r3, r1
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ec4:	4659      	mov	r1, fp
 8002ec6:	00cb      	lsls	r3, r1, #3
 8002ec8:	4651      	mov	r1, sl
 8002eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ece:	4651      	mov	r1, sl
 8002ed0:	00ca      	lsls	r2, r1, #3
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4642      	mov	r2, r8
 8002eda:	189b      	adds	r3, r3, r2
 8002edc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ee0:	464b      	mov	r3, r9
 8002ee2:	460a      	mov	r2, r1
 8002ee4:	eb42 0303 	adc.w	r3, r2, r3
 8002ee8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ef6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002f04:	4649      	mov	r1, r9
 8002f06:	008b      	lsls	r3, r1, #2
 8002f08:	4641      	mov	r1, r8
 8002f0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f0e:	4641      	mov	r1, r8
 8002f10:	008a      	lsls	r2, r1, #2
 8002f12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002f16:	f7fd f957 	bl	80001c8 <__aeabi_uldivmod>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4b38      	ldr	r3, [pc, #224]	@ (8003004 <UART_SetConfig+0x4e4>)
 8002f22:	fba3 2301 	umull	r2, r3, r3, r1
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	2264      	movs	r2, #100	@ 0x64
 8002f2a:	fb02 f303 	mul.w	r3, r2, r3
 8002f2e:	1acb      	subs	r3, r1, r3
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	3332      	adds	r3, #50	@ 0x32
 8002f34:	4a33      	ldr	r2, [pc, #204]	@ (8003004 <UART_SetConfig+0x4e4>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f40:	441c      	add	r4, r3
 8002f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f46:	2200      	movs	r2, #0
 8002f48:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002f50:	4642      	mov	r2, r8
 8002f52:	464b      	mov	r3, r9
 8002f54:	1891      	adds	r1, r2, r2
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	415b      	adcs	r3, r3
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f60:	4641      	mov	r1, r8
 8002f62:	1851      	adds	r1, r2, r1
 8002f64:	6039      	str	r1, [r7, #0]
 8002f66:	4649      	mov	r1, r9
 8002f68:	414b      	adcs	r3, r1
 8002f6a:	607b      	str	r3, [r7, #4]
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f78:	4659      	mov	r1, fp
 8002f7a:	00cb      	lsls	r3, r1, #3
 8002f7c:	4651      	mov	r1, sl
 8002f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f82:	4651      	mov	r1, sl
 8002f84:	00ca      	lsls	r2, r1, #3
 8002f86:	4610      	mov	r0, r2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	4642      	mov	r2, r8
 8002f8e:	189b      	adds	r3, r3, r2
 8002f90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f92:	464b      	mov	r3, r9
 8002f94:	460a      	mov	r2, r1
 8002f96:	eb42 0303 	adc.w	r3, r2, r3
 8002f9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002fa6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002fb4:	4649      	mov	r1, r9
 8002fb6:	008b      	lsls	r3, r1, #2
 8002fb8:	4641      	mov	r1, r8
 8002fba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fbe:	4641      	mov	r1, r8
 8002fc0:	008a      	lsls	r2, r1, #2
 8002fc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002fc6:	f7fd f8ff 	bl	80001c8 <__aeabi_uldivmod>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4b0d      	ldr	r3, [pc, #52]	@ (8003004 <UART_SetConfig+0x4e4>)
 8002fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fd4:	095b      	lsrs	r3, r3, #5
 8002fd6:	2164      	movs	r1, #100	@ 0x64
 8002fd8:	fb01 f303 	mul.w	r3, r1, r3
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	3332      	adds	r3, #50	@ 0x32
 8002fe2:	4a08      	ldr	r2, [pc, #32]	@ (8003004 <UART_SetConfig+0x4e4>)
 8002fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	f003 020f 	and.w	r2, r3, #15
 8002fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4422      	add	r2, r4
 8002ff6:	609a      	str	r2, [r3, #8]
}
 8002ff8:	bf00      	nop
 8002ffa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002ffe:	46bd      	mov	sp, r7
 8003000:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003004:	51eb851f 	.word	0x51eb851f

08003008 <memset>:
 8003008:	4402      	add	r2, r0
 800300a:	4603      	mov	r3, r0
 800300c:	4293      	cmp	r3, r2
 800300e:	d100      	bne.n	8003012 <memset+0xa>
 8003010:	4770      	bx	lr
 8003012:	f803 1b01 	strb.w	r1, [r3], #1
 8003016:	e7f9      	b.n	800300c <memset+0x4>

08003018 <__libc_init_array>:
 8003018:	b570      	push	{r4, r5, r6, lr}
 800301a:	4d0d      	ldr	r5, [pc, #52]	@ (8003050 <__libc_init_array+0x38>)
 800301c:	4c0d      	ldr	r4, [pc, #52]	@ (8003054 <__libc_init_array+0x3c>)
 800301e:	1b64      	subs	r4, r4, r5
 8003020:	10a4      	asrs	r4, r4, #2
 8003022:	2600      	movs	r6, #0
 8003024:	42a6      	cmp	r6, r4
 8003026:	d109      	bne.n	800303c <__libc_init_array+0x24>
 8003028:	4d0b      	ldr	r5, [pc, #44]	@ (8003058 <__libc_init_array+0x40>)
 800302a:	4c0c      	ldr	r4, [pc, #48]	@ (800305c <__libc_init_array+0x44>)
 800302c:	f000 f818 	bl	8003060 <_init>
 8003030:	1b64      	subs	r4, r4, r5
 8003032:	10a4      	asrs	r4, r4, #2
 8003034:	2600      	movs	r6, #0
 8003036:	42a6      	cmp	r6, r4
 8003038:	d105      	bne.n	8003046 <__libc_init_array+0x2e>
 800303a:	bd70      	pop	{r4, r5, r6, pc}
 800303c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003040:	4798      	blx	r3
 8003042:	3601      	adds	r6, #1
 8003044:	e7ee      	b.n	8003024 <__libc_init_array+0xc>
 8003046:	f855 3b04 	ldr.w	r3, [r5], #4
 800304a:	4798      	blx	r3
 800304c:	3601      	adds	r6, #1
 800304e:	e7f2      	b.n	8003036 <__libc_init_array+0x1e>
 8003050:	08003098 	.word	0x08003098
 8003054:	08003098 	.word	0x08003098
 8003058:	08003098 	.word	0x08003098
 800305c:	0800309c 	.word	0x0800309c

08003060 <_init>:
 8003060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003062:	bf00      	nop
 8003064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003066:	bc08      	pop	{r3}
 8003068:	469e      	mov	lr, r3
 800306a:	4770      	bx	lr

0800306c <_fini>:
 800306c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306e:	bf00      	nop
 8003070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003072:	bc08      	pop	{r3}
 8003074:	469e      	mov	lr, r3
 8003076:	4770      	bx	lr
